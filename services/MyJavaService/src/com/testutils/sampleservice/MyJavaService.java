/*Generated by WaveMaker Studio*/
package com.testutils.sampleservice;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;


import com.wavemaker.runtime.security.SecurityService;
import com.wavemaker.runtime.service.annotations.ExposeToClient;
import com.wavemaker.runtime.service.annotations.HideFromClient;
import java.util.List;
import com.testutils.leave_application_db.EmployeeDetails;
import com.testutils.leave_application_db.service.EmployeeDetailsService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.beans.factory.annotation.Value;


//import com.testutils.sampleservice.model.*;

/**
 * This is a singleton class with all its public methods exposed as REST APIs via generated controller class.
 * To avoid exposing an API for a particular public method, annotate it with @HideFromClient.
 *
 * Method names will play a major role in defining the Http Method for the generated APIs. For example, a method name
 * that starts with delete/remove, will make the API exposed as Http Method "DELETE".
 *
 * Method Parameters of type primitives (including java.lang.String) will be exposed as Query Parameters &
 * Complex Types/Objects will become part of the Request body in the generated API.
 */
@ExposeToClient
public class MyJavaService {

    private static final Logger logger = LoggerFactory.getLogger(MyJavaService.class);

    @Autowired
    private SecurityService securityService;
    
    @Autowired
    private EmployeeDetailsService empDtlService;
    
    @Value("${USER.NAME}")
    private String userName;

    /**
     * This is sample java operation that accepts an input from the caller and responds with "Hello".
     *
     * SecurityService that is Autowired will provide access to the security context of the caller. It has methods like isAuthenticated(),
     * getUserName() and getUserId() etc which returns the information based on the caller context.
     *
     * Methods in this class can declare HttpServletRequest, HttpServletResponse as input parameters to access the
     * caller's request/response objects respectively. These parameters will be injected when request is made (during API invocation).
     */
     public Page<EmployeeDetails> sampleJavaOperation(String name) {
	       // logger.debug("Starting sample operation with request url " + request.getRequestURL().toString());
	        
	        logger.debug("Starting sample operation user name fetched from environment properties: " + userName);
	        
	        List result = null;
	        
	        Pageable pageable = new PageRequest(0, 10);
			Page<EmployeeDetails> testResult = empDtlService.findAll("", pageable );
			
	        logger.debug("Returning {}", result);
	        return testResult;
	    }

}
