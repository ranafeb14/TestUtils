/*Generated by WaveMaker Studio*/
package com.testutils.testcorridor.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.testcorridor.Employee;
import com.testutils.testcorridor.EmployeeDetails;


/**
 * ServiceImpl object for domain model class Employee.
 *
 * @see Employee
 */
@Service("TestCorridor.EmployeeService")
public class EmployeeServiceImpl implements EmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeServiceImpl.class);

    @Autowired
	@Qualifier("TestCorridor.EmployeeDetailsService")
	private EmployeeDetailsService employeeDetailsService;

    @Autowired
    @Qualifier("TestCorridor.EmployeeDao")
    private WMGenericDao<Employee, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Employee, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestCorridorTransactionManager")
    @Override
	public Employee create(Employee employee) {
        LOGGER.debug("Creating a new Employee with information: {}", employee);
        Employee employeeCreated = this.wmGenericDao.create(employee);
        if(employeeCreated.getEmployeeDetailsForId() != null) {
            EmployeeDetails employeeDetailsForId = employeeCreated.getEmployeeDetailsForId();
            LOGGER.debug("Creating a new child EmployeeDetails with information: {}", employeeDetailsForId);
            employeeDetailsForId.setEmployeeById(employeeCreated);
            employeeDetailsService.create(employeeDetailsForId);
        }

        if(employeeCreated.getEmployeeDetailsesForManagerId() != null) {
            for(EmployeeDetails employeeDetailsesForManagerId : employeeCreated.getEmployeeDetailsesForManagerId()) {
                employeeDetailsesForManagerId.setEmployeeByManagerId(employeeCreated);
                LOGGER.debug("Creating a new child EmployeeDetails with information: {}", employeeDetailsesForManagerId);
                employeeDetailsService.create(employeeDetailsesForManagerId);
            }
        }
        return employeeCreated;
    }

	@Transactional(readOnly = true, value = "TestCorridorTransactionManager")
	@Override
	public Employee getById(Long employeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Employee by id: {}", employeeId);
        Employee employee = this.wmGenericDao.findById(employeeId);
        if (employee == null){
            LOGGER.debug("No Employee found with id: {}", employeeId);
            throw new EntityNotFoundException(String.valueOf(employeeId));
        }
        return employee;
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
	@Override
	public Employee findById(Long employeeId) {
        LOGGER.debug("Finding Employee by id: {}", employeeId);
        return this.wmGenericDao.findById(employeeId);
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
    @Override
    public Employee getByLdapUid(String ldapUid) {
        Map<String, Object> ldapUidMap = new HashMap<>();
        ldapUidMap.put("ldapUid", ldapUid);

        LOGGER.debug("Finding Employee by unique keys: {}", ldapUidMap);
        Employee employee = this.wmGenericDao.findByUniqueKey(ldapUidMap);

        if (employee == null){
            LOGGER.debug("No Employee found with given unique key values: {}", ldapUidMap);
            throw new EntityNotFoundException(String.valueOf(ldapUidMap));
        }

        return employee;
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
    @Override
    public Employee getByEmailAndActive(String email, boolean active) {
        Map<String, Object> emailAndActiveMap = new HashMap<>();
        emailAndActiveMap.put("email", email);
        emailAndActiveMap.put("active", active);

        LOGGER.debug("Finding Employee by unique keys: {}", emailAndActiveMap);
        Employee employee = this.wmGenericDao.findByUniqueKey(emailAndActiveMap);

        if (employee == null){
            LOGGER.debug("No Employee found with given unique key values: {}", emailAndActiveMap);
            throw new EntityNotFoundException(String.valueOf(emailAndActiveMap));
        }

        return employee;
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
    @Override
    public Employee getByEmployeeCode(long employeeCode) {
        Map<String, Object> employeeCodeMap = new HashMap<>();
        employeeCodeMap.put("employeeCode", employeeCode);

        LOGGER.debug("Finding Employee by unique keys: {}", employeeCodeMap);
        Employee employee = this.wmGenericDao.findByUniqueKey(employeeCodeMap);

        if (employee == null){
            LOGGER.debug("No Employee found with given unique key values: {}", employeeCodeMap);
            throw new EntityNotFoundException(String.valueOf(employeeCodeMap));
        }

        return employee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestCorridorTransactionManager")
	@Override
	public Employee update(Employee employee) throws EntityNotFoundException {
        LOGGER.debug("Updating Employee with information: {}", employee);
        this.wmGenericDao.update(employee);

        Long employeeId = employee.getId();

        return this.wmGenericDao.findById(employeeId);
    }

    @Transactional(value = "TestCorridorTransactionManager")
	@Override
	public Employee delete(Long employeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employee with id: {}", employeeId);
        Employee deleted = this.wmGenericDao.findById(employeeId);
        if (deleted == null) {
            LOGGER.debug("No Employee found with id: {}", employeeId);
            throw new EntityNotFoundException(String.valueOf(employeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestCorridorTransactionManager")
	@Override
	public Page<Employee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Employees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
    @Override
    public Page<Employee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Employees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestCorridor for table Employee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestCorridorTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "TestCorridorTransactionManager")
    @Override
    public Page<EmployeeDetails> findAssociatedEmployeeDetailsesForManagerId(Long id, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeeDetailsesForManagerId");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employeeByManagerId.id = '" + id + "'");

        return employeeDetailsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeDetailsService instance
	 */
	protected void setEmployeeDetailsService(EmployeeDetailsService service) {
        this.employeeDetailsService = service;
    }

}

