/*Generated by WaveMaker Studio*/
package com.testutils.testdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.testdb.EmployeeSkillsUtf8UnicodeCi;
import com.testutils.testdb.EmployeeUtf8mb4;

/**
 * Service object for domain model class {@link EmployeeUtf8mb4}.
 */
public interface EmployeeUtf8mb4Service {

    /**
     * Creates a new EmployeeUtf8mb4. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeUtf8mb4 if any.
     *
     * @param employeeUtf8mb4 Details of the EmployeeUtf8mb4 to be created; value cannot be null.
     * @return The newly created EmployeeUtf8mb4.
     */
	EmployeeUtf8mb4 create(EmployeeUtf8mb4 employeeUtf8mb4);


	/**
	 * Returns EmployeeUtf8mb4 by given id if exists.
	 *
	 * @param employeeutf8mb4Id The id of the EmployeeUtf8mb4 to get; value cannot be null.
	 * @return EmployeeUtf8mb4 associated with the given employeeutf8mb4Id.
     * @throws EntityNotFoundException If no EmployeeUtf8mb4 is found.
	 */
	EmployeeUtf8mb4 getById(Long employeeutf8mb4Id) throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeUtf8mb4 by given id if exists, returns null otherwise.
	 *
	 * @param employeeutf8mb4Id The id of the EmployeeUtf8mb4 to get; value cannot be null.
	 * @return EmployeeUtf8mb4 associated with the given employeeutf8mb4Id.
	 */
	EmployeeUtf8mb4 findById(Long employeeutf8mb4Id);

    /**
	 * Find and return the EmployeeUtf8mb4 for given ldapUid  if exists.
	 *
	 * @param ldapUid value of ldapUid; value cannot be null.
	 * @return EmployeeUtf8mb4 associated with the given inputs.
     * @throws EntityNotFoundException if no matching EmployeeUtf8mb4 found.
	 */
    EmployeeUtf8mb4 getByLdapUid(String ldapUid)throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeUtf8mb4 for given email  andactive  if exists.
	 *
	 * @param email value of email; value cannot be null.
	 * @param active value of active; value cannot be null.
	 * @return EmployeeUtf8mb4 associated with the given inputs.
     * @throws EntityNotFoundException if no matching EmployeeUtf8mb4 found.
	 */
    EmployeeUtf8mb4 getByEmailAndActive(String email, boolean active)throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeUtf8mb4 for given employeeCode  if exists.
	 *
	 * @param employeeCode value of employeeCode; value cannot be null.
	 * @return EmployeeUtf8mb4 associated with the given inputs.
     * @throws EntityNotFoundException if no matching EmployeeUtf8mb4 found.
	 */
    EmployeeUtf8mb4 getByEmployeeCode(long employeeCode)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing EmployeeUtf8mb4. It replaces all fields of the existing EmployeeUtf8mb4 with the given employeeUtf8mb4.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeUtf8mb4 if any.
     *
	 * @param employeeUtf8mb4 The details of the EmployeeUtf8mb4 to be updated; value cannot be null.
	 * @return The updated EmployeeUtf8mb4.
	 * @throws EntityNotFoundException if no EmployeeUtf8mb4 is found with given input.
	 */
	EmployeeUtf8mb4 update(EmployeeUtf8mb4 employeeUtf8mb4) throws EntityNotFoundException;

    /**
	 * Deletes an existing EmployeeUtf8mb4 with the given id.
	 *
	 * @param employeeutf8mb4Id The id of the EmployeeUtf8mb4 to be deleted; value cannot be null.
	 * @return The deleted EmployeeUtf8mb4.
	 * @throws EntityNotFoundException if no EmployeeUtf8mb4 found with the given id.
	 */
	EmployeeUtf8mb4 delete(Long employeeutf8mb4Id) throws EntityNotFoundException;

	/**
	 * Find all EmployeeUtf8mb4s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeUtf8mb4s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<EmployeeUtf8mb4> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all EmployeeUtf8mb4s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeUtf8mb4s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<EmployeeUtf8mb4> findAll(String query, Pageable pageable);

    /**
	 * Exports all EmployeeUtf8mb4s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeUtf8mb4s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the EmployeeUtf8mb4.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated employeeSkillsUtf8unicodeCis for given EmployeeUtf8mb4 id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated EmployeeSkillsUtf8UnicodeCi instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<EmployeeSkillsUtf8UnicodeCi> findAssociatedEmployeeSkillsUtf8unicodeCis(Long id, Pageable pageable);

}

