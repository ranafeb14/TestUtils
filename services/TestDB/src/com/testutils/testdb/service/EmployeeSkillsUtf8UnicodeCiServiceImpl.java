/*Generated by WaveMaker Studio*/
package com.testutils.testdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.testdb.EmployeeSkillsUtf8UnicodeCi;


/**
 * ServiceImpl object for domain model class EmployeeSkillsUtf8UnicodeCi.
 *
 * @see EmployeeSkillsUtf8UnicodeCi
 */
@Service("TestDB.EmployeeSkillsUtf8UnicodeCiService")
public class EmployeeSkillsUtf8UnicodeCiServiceImpl implements EmployeeSkillsUtf8UnicodeCiService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeSkillsUtf8UnicodeCiServiceImpl.class);


    @Autowired
    @Qualifier("TestDB.EmployeeSkillsUtf8UnicodeCiDao")
    private WMGenericDao<EmployeeSkillsUtf8UnicodeCi, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeSkillsUtf8UnicodeCi, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "TestDBTransactionManager")
    @Override
	public EmployeeSkillsUtf8UnicodeCi create(EmployeeSkillsUtf8UnicodeCi employeeSkillsUtf8unicodeCi) {
        LOGGER.debug("Creating a new EmployeeSkillsUtf8UnicodeCi with information: {}", employeeSkillsUtf8unicodeCi);
        EmployeeSkillsUtf8UnicodeCi employeeSkillsUtf8unicodeCiCreated = this.wmGenericDao.create(employeeSkillsUtf8unicodeCi);
        return employeeSkillsUtf8unicodeCiCreated;
    }

	@Transactional(readOnly = true, value = "TestDBTransactionManager")
	@Override
	public EmployeeSkillsUtf8UnicodeCi getById(Integer employeeskillsutf8unicodeciId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeSkillsUtf8UnicodeCi by id: {}", employeeskillsutf8unicodeciId);
        EmployeeSkillsUtf8UnicodeCi employeeSkillsUtf8unicodeCi = this.wmGenericDao.findById(employeeskillsutf8unicodeciId);
        if (employeeSkillsUtf8unicodeCi == null){
            LOGGER.debug("No EmployeeSkillsUtf8UnicodeCi found with id: {}", employeeskillsutf8unicodeciId);
            throw new EntityNotFoundException(String.valueOf(employeeskillsutf8unicodeciId));
        }
        return employeeSkillsUtf8unicodeCi;
    }

    @Transactional(readOnly = true, value = "TestDBTransactionManager")
	@Override
	public EmployeeSkillsUtf8UnicodeCi findById(Integer employeeskillsutf8unicodeciId) {
        LOGGER.debug("Finding EmployeeSkillsUtf8UnicodeCi by id: {}", employeeskillsutf8unicodeciId);
        return this.wmGenericDao.findById(employeeskillsutf8unicodeciId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "TestDBTransactionManager")
	@Override
	public EmployeeSkillsUtf8UnicodeCi update(EmployeeSkillsUtf8UnicodeCi employeeSkillsUtf8unicodeCi) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeSkillsUtf8UnicodeCi with information: {}", employeeSkillsUtf8unicodeCi);
        this.wmGenericDao.update(employeeSkillsUtf8unicodeCi);

        Integer employeeskillsutf8unicodeciId = employeeSkillsUtf8unicodeCi.getId();

        return this.wmGenericDao.findById(employeeskillsutf8unicodeciId);
    }

    @Transactional(value = "TestDBTransactionManager")
	@Override
	public EmployeeSkillsUtf8UnicodeCi delete(Integer employeeskillsutf8unicodeciId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeSkillsUtf8UnicodeCi with id: {}", employeeskillsutf8unicodeciId);
        EmployeeSkillsUtf8UnicodeCi deleted = this.wmGenericDao.findById(employeeskillsutf8unicodeciId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeSkillsUtf8UnicodeCi found with id: {}", employeeskillsutf8unicodeciId);
            throw new EntityNotFoundException(String.valueOf(employeeskillsutf8unicodeciId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "TestDBTransactionManager")
	@Override
	public Page<EmployeeSkillsUtf8UnicodeCi> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeSkillsUtf8UnicodeCis");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "TestDBTransactionManager")
    @Override
    public Page<EmployeeSkillsUtf8UnicodeCi> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeSkillsUtf8UnicodeCis");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "TestDBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service TestDB for table EmployeeSkillsUtf8UnicodeCi to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "TestDBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "TestDBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

