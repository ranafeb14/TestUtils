/*Generated by WaveMaker Studio*/
package com.testutils.testdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.testdb.EmployeeOne;

/**
 * Service object for domain model class {@link EmployeeOne}.
 */
public interface EmployeeOneService {

    /**
     * Creates a new EmployeeOne. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeOne if any.
     *
     * @param employeeOne Details of the EmployeeOne to be created; value cannot be null.
     * @return The newly created EmployeeOne.
     */
	EmployeeOne create(EmployeeOne employeeOne);


	/**
	 * Returns EmployeeOne by given id if exists.
	 *
	 * @param employeeoneId The id of the EmployeeOne to get; value cannot be null.
	 * @return EmployeeOne associated with the given employeeoneId.
     * @throws EntityNotFoundException If no EmployeeOne is found.
	 */
	EmployeeOne getById(Long employeeoneId) throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeOne by given id if exists, returns null otherwise.
	 *
	 * @param employeeoneId The id of the EmployeeOne to get; value cannot be null.
	 * @return EmployeeOne associated with the given employeeoneId.
	 */
	EmployeeOne findById(Long employeeoneId);

    /**
	 * Find and return the EmployeeOne for given email  andactive  if exists.
	 *
	 * @param email value of email; value cannot be null.
	 * @param active value of active; value cannot be null.
	 * @return EmployeeOne associated with the given inputs.
     * @throws EntityNotFoundException if no matching EmployeeOne found.
	 */
    EmployeeOne getByEmailAndActive(String email, boolean active)throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeOne for given ldapUid  if exists.
	 *
	 * @param ldapUid value of ldapUid; value cannot be null.
	 * @return EmployeeOne associated with the given inputs.
     * @throws EntityNotFoundException if no matching EmployeeOne found.
	 */
    EmployeeOne getByLdapUid(String ldapUid)throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeOne for given employeeCode  if exists.
	 *
	 * @param employeeCode value of employeeCode; value cannot be null.
	 * @return EmployeeOne associated with the given inputs.
     * @throws EntityNotFoundException if no matching EmployeeOne found.
	 */
    EmployeeOne getByEmployeeCode(long employeeCode)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing EmployeeOne. It replaces all fields of the existing EmployeeOne with the given employeeOne.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeOne if any.
     *
	 * @param employeeOne The details of the EmployeeOne to be updated; value cannot be null.
	 * @return The updated EmployeeOne.
	 * @throws EntityNotFoundException if no EmployeeOne is found with given input.
	 */
	EmployeeOne update(EmployeeOne employeeOne) throws EntityNotFoundException;

    /**
	 * Deletes an existing EmployeeOne with the given id.
	 *
	 * @param employeeoneId The id of the EmployeeOne to be deleted; value cannot be null.
	 * @return The deleted EmployeeOne.
	 * @throws EntityNotFoundException if no EmployeeOne found with the given id.
	 */
	EmployeeOne delete(Long employeeoneId) throws EntityNotFoundException;

	/**
	 * Find all EmployeeOnes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeOnes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<EmployeeOne> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all EmployeeOnes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeOnes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<EmployeeOne> findAll(String query, Pageable pageable);

    /**
	 * Exports all EmployeeOnes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeOnes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the EmployeeOne.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

