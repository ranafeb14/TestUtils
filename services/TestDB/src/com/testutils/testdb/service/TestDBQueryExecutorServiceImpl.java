/*Generated by WaveMaker Studio*/

package com.testutils.testdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.testdb.models.query.*;

@Service
public class TestDBQueryExecutorServiceImpl implements TestDBQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestDBQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("TestDBWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "TestDBTransactionManager")
    @Override
    public Integer executeSaveEmployee(SaveEmployeeRequest saveEmployeeRequest) {
        Map params = new HashMap(3);

        params.put("name", saveEmployeeRequest.getName());
        params.put("salary", saveEmployeeRequest.getSalary());
        params.put("employeeCode", saveEmployeeRequest.getEmployeeCode());

        return queryExecutor.executeNamedQueryForUpdate("saveEmployee", params);
    }

    @Transactional(readOnly = true, value = "TestDBTransactionManager")
    @Override
    public Page<TestResponse> executeTest(List<String> name, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("name", name);

        return queryExecutor.executeNamedQuery("test", params, TestResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "TestDBTransactionManager")
    @Override
    public Downloadable exportTest(ExportType exportType, List<String> name, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("name", name);

        return queryExecutor.exportNamedQueryData("test", params, exportType, TestResponse.class, pageable);
    }

}


