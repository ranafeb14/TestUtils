/*Generated by WaveMaker Studio*/
package com.testutils.testdb;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * EmployeeSkillsUtf8UnicodeCi generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`employee_skills_utf8_unicode_ci`")
public class EmployeeSkillsUtf8UnicodeCi implements Serializable {

    private Integer id;
    private int skillId;
    private short proficiency;
    private Boolean isPrimary;
    private Timestamp createdDate;
    private Timestamp lastModifiedDate;
    private String lastModifiedBy;
    private long employeeId;
    private EmployeeUtf8mb4 employeeUtf8mb4;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`skill_id`", nullable = false, scale = 0, precision = 10)
    public int getSkillId() {
        return this.skillId;
    }

    public void setSkillId(int skillId) {
        this.skillId = skillId;
    }

    @Column(name = "`proficiency`", nullable = false, scale = 0, precision = 5)
    public short getProficiency() {
        return this.proficiency;
    }

    public void setProficiency(short proficiency) {
        this.proficiency = proficiency;
    }

    @Column(name = "`is_primary`", nullable = true)
    public Boolean getIsPrimary() {
        return this.isPrimary;
    }

    public void setIsPrimary(Boolean isPrimary) {
        this.isPrimary = isPrimary;
    }

    @Column(name = "`created_date`", nullable = false)
    public Timestamp getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(Timestamp createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "`last_modified_date`", nullable = true)
    public Timestamp getLastModifiedDate() {
        return this.lastModifiedDate;
    }

    public void setLastModifiedDate(Timestamp lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }

    @Column(name = "`last_modified_by`", nullable = true, length = 60)
    public String getLastModifiedBy() {
        return this.lastModifiedBy;
    }

    public void setLastModifiedBy(String lastModifiedBy) {
        this.lastModifiedBy = lastModifiedBy;
    }

    @Column(name = "`employee_id`", nullable = false, scale = 0, precision = 19)
    public long getEmployeeId() {
        return this.employeeId;
    }

    public void setEmployeeId(long employeeId) {
        this.employeeId = employeeId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`employee_id`", referencedColumnName = "`employee_code`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`fk_employee_skills_emp_id_1`"))
    public EmployeeUtf8mb4 getEmployeeUtf8mb4() {
        return this.employeeUtf8mb4;
    }

    public void setEmployeeUtf8mb4(EmployeeUtf8mb4 employeeUtf8mb4) {
        if(employeeUtf8mb4 != null) {
            this.employeeId = employeeUtf8mb4.getEmployeeCode();
        }

        this.employeeUtf8mb4 = employeeUtf8mb4;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof EmployeeSkillsUtf8UnicodeCi)) return false;
        final EmployeeSkillsUtf8UnicodeCi employeeSkillsUtf8unicodeCi = (EmployeeSkillsUtf8UnicodeCi) o;
        return Objects.equals(getId(), employeeSkillsUtf8unicodeCi.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

