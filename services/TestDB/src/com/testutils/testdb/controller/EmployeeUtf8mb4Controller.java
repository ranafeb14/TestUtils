/*Generated by WaveMaker Studio*/
package com.testutils.testdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.testdb.EmployeeSkillsUtf8UnicodeCi;
import com.testutils.testdb.EmployeeUtf8mb4;
import com.testutils.testdb.service.EmployeeUtf8mb4Service;


/**
 * Controller object for domain model class EmployeeUtf8mb4.
 * @see EmployeeUtf8mb4
 */
@RestController("TestDB.EmployeeUtf8mb4Controller")
@Api(value = "EmployeeUtf8mb4Controller", description = "Exposes APIs to work with EmployeeUtf8mb4 resource.")
@RequestMapping("/TestDB/EmployeeUtf8mb4")
public class EmployeeUtf8mb4Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeUtf8mb4Controller.class);

    @Autowired
	@Qualifier("TestDB.EmployeeUtf8mb4Service")
	private EmployeeUtf8mb4Service employeeUtf8mb4Service;

	@ApiOperation(value = "Creates a new EmployeeUtf8mb4 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public EmployeeUtf8mb4 createEmployeeUtf8mb4(@RequestBody EmployeeUtf8mb4 employeeUtf8mb4) {
		LOGGER.debug("Create EmployeeUtf8mb4 with information: {}" , employeeUtf8mb4);

		employeeUtf8mb4 = employeeUtf8mb4Service.create(employeeUtf8mb4);
		LOGGER.debug("Created EmployeeUtf8mb4 with information: {}" , employeeUtf8mb4);

	    return employeeUtf8mb4;
	}

    @ApiOperation(value = "Returns the EmployeeUtf8mb4 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeUtf8mb4 getEmployeeUtf8mb4(@PathVariable("id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeUtf8mb4 with id: {}" , id);

        EmployeeUtf8mb4 foundEmployeeUtf8mb4 = employeeUtf8mb4Service.getById(id);
        LOGGER.debug("EmployeeUtf8mb4 details with id: {}" , foundEmployeeUtf8mb4);

        return foundEmployeeUtf8mb4;
    }

    @ApiOperation(value = "Updates the EmployeeUtf8mb4 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeUtf8mb4 editEmployeeUtf8mb4(@PathVariable("id") Long id, @RequestBody EmployeeUtf8mb4 employeeUtf8mb4) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeUtf8mb4 with id: {}" , employeeUtf8mb4.getId());

        employeeUtf8mb4.setId(id);
        employeeUtf8mb4 = employeeUtf8mb4Service.update(employeeUtf8mb4);
        LOGGER.debug("EmployeeUtf8mb4 details with id: {}" , employeeUtf8mb4);

        return employeeUtf8mb4;
    }

    @ApiOperation(value = "Deletes the EmployeeUtf8mb4 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployeeUtf8mb4(@PathVariable("id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeUtf8mb4 with id: {}" , id);

        EmployeeUtf8mb4 deletedEmployeeUtf8mb4 = employeeUtf8mb4Service.delete(id);

        return deletedEmployeeUtf8mb4 != null;
    }

    @RequestMapping(value = "/ldapUid/{ldapUid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EmployeeUtf8mb4 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeUtf8mb4 getByLdapUid(@PathVariable("ldapUid") String ldapUid) {
        LOGGER.debug("Getting EmployeeUtf8mb4 with uniques key LdapUid");
        return employeeUtf8mb4Service.getByLdapUid(ldapUid);
    }

    @RequestMapping(value = "/employeeCode/{employeeCode}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EmployeeUtf8mb4 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeUtf8mb4 getByEmployeeCode(@PathVariable("employeeCode") long employeeCode) {
        LOGGER.debug("Getting EmployeeUtf8mb4 with uniques key EmployeeCode");
        return employeeUtf8mb4Service.getByEmployeeCode(employeeCode);
    }

    @RequestMapping(value = "/email-active", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EmployeeUtf8mb4 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeUtf8mb4 getByEmailAndActive(@RequestParam("email") String email, @RequestParam("active") boolean active) {
        LOGGER.debug("Getting EmployeeUtf8mb4 with uniques key EmailAndActive");
        return employeeUtf8mb4Service.getByEmailAndActive(email, active);
    }

    /**
     * @deprecated Use {@link #findEmployeeUtf8mb4s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmployeeUtf8mb4 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeUtf8mb4> searchEmployeeUtf8mb4sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeUtf8mb4s list");
        return employeeUtf8mb4Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeUtf8mb4 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeUtf8mb4> findEmployeeUtf8mb4s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeUtf8mb4s list");
        return employeeUtf8mb4Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeUtf8mb4 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeUtf8mb4> filterEmployeeUtf8mb4s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeUtf8mb4s list");
        return employeeUtf8mb4Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeeUtf8mb4s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeUtf8mb4Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmployeeUtf8mb4 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployeeUtf8mb4s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeUtf8mb4s");
		return employeeUtf8mb4Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmployeeUtf8mb4AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employeeUtf8mb4Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/employeeSkillsUtf8unicodeCis", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSkillsUtf8unicodeCis instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeSkillsUtf8UnicodeCi> findAssociatedEmployeeSkillsUtf8unicodeCis(@PathVariable("id") Long id, Pageable pageable) {

        LOGGER.debug("Fetching all associated employeeSkillsUtf8unicodeCis");
        return employeeUtf8mb4Service.findAssociatedEmployeeSkillsUtf8unicodeCis(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeUtf8mb4Service instance
	 */
	protected void setEmployeeUtf8mb4Service(EmployeeUtf8mb4Service service) {
		this.employeeUtf8mb4Service = service;
	}

}

