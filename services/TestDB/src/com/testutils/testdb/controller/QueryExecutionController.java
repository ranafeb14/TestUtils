/*Generated by WaveMaker Studio*/

package com.testutils.testdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.testutils.testdb.service.TestDBQueryExecutorService;
import com.testutils.testdb.models.query.*;

@RestController(value = "TestDB.QueryExecutionController")
@RequestMapping("/TestDB/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private TestDBQueryExecutorService queryService;

    @RequestMapping(value = "/queries/test", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "test")
    public Page<TestResponse> executeTest(@RequestParam(value = "name") List<String> name, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: test");
        Page<TestResponse> _result = queryService.executeTest(name, pageable);
        LOGGER.debug("got the result for named query: test, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query test")
    @RequestMapping(value = "/queries/test/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTest(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "name") List<String> name, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Exporting named query: test");

        return queryService.exportTest(exportType, name, pageable);
    }

    @RequestMapping(value = "/queries/saveEmployee", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "saveMultiple employees")
    public IntegerWrapper executeSaveEmployee(@Valid @RequestBody SaveEmployeeRequest saveEmployeeRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: saveEmployee");
        Integer _result = queryService.executeSaveEmployee(saveEmployeeRequest);
        LOGGER.debug("got the result for named query: saveEmployee, result:{}", _result);
        return new IntegerWrapper(_result);
    }

}


