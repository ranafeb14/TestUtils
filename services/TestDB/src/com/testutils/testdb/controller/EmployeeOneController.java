/*Generated by WaveMaker Studio*/
package com.testutils.testdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.testdb.EmployeeOne;
import com.testutils.testdb.service.EmployeeOneService;


/**
 * Controller object for domain model class EmployeeOne.
 * @see EmployeeOne
 */
@RestController("TestDB.EmployeeOneController")
@Api(value = "EmployeeOneController", description = "Exposes APIs to work with EmployeeOne resource.")
@RequestMapping("/TestDB/EmployeeOne")
public class EmployeeOneController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeOneController.class);

    @Autowired
	@Qualifier("TestDB.EmployeeOneService")
	private EmployeeOneService employeeOneService;

	@ApiOperation(value = "Creates a new EmployeeOne instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EmployeeOne createEmployeeOne(@RequestBody EmployeeOne employeeOne) {
		LOGGER.debug("Create EmployeeOne with information: {}" , employeeOne);

		employeeOne = employeeOneService.create(employeeOne);
		LOGGER.debug("Created EmployeeOne with information: {}" , employeeOne);

	    return employeeOne;
	}


    @ApiOperation(value = "Returns the EmployeeOne instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeOne getEmployeeOne(@PathVariable("id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeOne with id: {}" , id);

        EmployeeOne foundEmployeeOne = employeeOneService.getById(id);
        LOGGER.debug("EmployeeOne details with id: {}" , foundEmployeeOne);

        return foundEmployeeOne;
    }

    @ApiOperation(value = "Updates the EmployeeOne instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeOne editEmployeeOne(@PathVariable("id") Long id, @RequestBody EmployeeOne employeeOne) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeOne with id: {}" , employeeOne.getId());

        employeeOne.setId(id);
        employeeOne = employeeOneService.update(employeeOne);
        LOGGER.debug("EmployeeOne details with id: {}" , employeeOne);

        return employeeOne;
    }

    @ApiOperation(value = "Deletes the EmployeeOne instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployeeOne(@PathVariable("id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeOne with id: {}" , id);

        EmployeeOne deletedEmployeeOne = employeeOneService.delete(id);

        return deletedEmployeeOne != null;
    }

    @RequestMapping(value = "/email-active", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EmployeeOne with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeOne getByEmailAndActive(@RequestParam("email") String email, @RequestParam("active") boolean active) {
        LOGGER.debug("Getting EmployeeOne with uniques key EmailAndActive");
        return employeeOneService.getByEmailAndActive(email, active);
    }

    @RequestMapping(value = "/ldapUid/{ldapUid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EmployeeOne with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeOne getByLdapUid(@PathVariable("ldapUid") String ldapUid) {
        LOGGER.debug("Getting EmployeeOne with uniques key LdapUid");
        return employeeOneService.getByLdapUid(ldapUid);
    }

    @RequestMapping(value = "/employeeCode/{employeeCode}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching EmployeeOne with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeOne getByEmployeeCode(@PathVariable("employeeCode") long employeeCode) {
        LOGGER.debug("Getting EmployeeOne with uniques key EmployeeCode");
        return employeeOneService.getByEmployeeCode(employeeCode);
    }

    /**
     * @deprecated Use {@link #findEmployeeOnes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmployeeOne instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeOne> searchEmployeeOnesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeOnes list");
        return employeeOneService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeOne instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeOne> findEmployeeOnes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeOnes list");
        return employeeOneService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeOne instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeOne> filterEmployeeOnes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeOnes list");
        return employeeOneService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeeOnes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeOneService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmployeeOne instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployeeOnes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeOnes");
		return employeeOneService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmployeeOneAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return employeeOneService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeOneService instance
	 */
	protected void setEmployeeOneService(EmployeeOneService service) {
		this.employeeOneService = service;
	}

}

