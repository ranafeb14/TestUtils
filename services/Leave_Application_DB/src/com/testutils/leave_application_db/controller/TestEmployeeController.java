/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.TestEmployee;
import com.testutils.leave_application_db.service.TestEmployeeService;


/**
 * Controller object for domain model class TestEmployee.
 * @see TestEmployee
 */
@RestController("Leave_Application_DB.TestEmployeeController")
@Api(value = "TestEmployeeController", description = "Exposes APIs to work with TestEmployee resource.")
@RequestMapping("/Leave_Application_DB/TestEmployee")
public class TestEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestEmployeeController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.TestEmployeeService")
	private TestEmployeeService testEmployeeService;

	@ApiOperation(value = "Creates a new TestEmployee instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TestEmployee createTestEmployee(@RequestBody TestEmployee testEmployee) {
		LOGGER.debug("Create TestEmployee with information: {}" , testEmployee);

		testEmployee = testEmployeeService.create(testEmployee);
		LOGGER.debug("Created TestEmployee with information: {}" , testEmployee);

	    return testEmployee;
	}


    @ApiOperation(value = "Returns the TestEmployee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestEmployee getTestEmployee(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestEmployee with id: {}" , id);

        TestEmployee foundTestEmployee = testEmployeeService.getById(id);
        LOGGER.debug("TestEmployee details with id: {}" , foundTestEmployee);

        return foundTestEmployee;
    }

    @ApiOperation(value = "Updates the TestEmployee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestEmployee editTestEmployee(@PathVariable("id") BigInteger id, @RequestBody TestEmployee testEmployee) throws EntityNotFoundException {
        LOGGER.debug("Editing TestEmployee with id: {}" , testEmployee.getId());

        testEmployee.setId(id);
        testEmployee = testEmployeeService.update(testEmployee);
        LOGGER.debug("TestEmployee details with id: {}" , testEmployee);

        return testEmployee;
    }

    @ApiOperation(value = "Deletes the TestEmployee instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTestEmployee(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestEmployee with id: {}" , id);

        TestEmployee deletedTestEmployee = testEmployeeService.delete(id);

        return deletedTestEmployee != null;
    }

    @RequestMapping(value = "/ldapUid/{ldapUid}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TestEmployee with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestEmployee getByLdapUid(@PathVariable("ldapUid") String ldapUid) {
        LOGGER.debug("Getting TestEmployee with uniques key LdapUid");
        return testEmployeeService.getByLdapUid(ldapUid);
    }

    @RequestMapping(value = "/email-active", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TestEmployee with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestEmployee getByEmailAndActive(@RequestParam("email") String email, @RequestParam("active") boolean active) {
        LOGGER.debug("Getting TestEmployee with uniques key EmailAndActive");
        return testEmployeeService.getByEmailAndActive(email, active);
    }

    @RequestMapping(value = "/testEmployeeCode/{testEmployeeCode}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TestEmployee with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TestEmployee getByTestEmployeeCode(@PathVariable("testEmployeeCode") BigInteger testEmployeeCode) {
        LOGGER.debug("Getting TestEmployee with uniques key TestEmployeeCode");
        return testEmployeeService.getByTestEmployeeCode(testEmployeeCode);
    }

    /**
     * @deprecated Use {@link #findTestEmployees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TestEmployee instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestEmployee> searchTestEmployeesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TestEmployees list");
        return testEmployeeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TestEmployee instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestEmployee> findTestEmployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestEmployees list");
        return testEmployeeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TestEmployee instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TestEmployee> filterTestEmployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TestEmployees list");
        return testEmployeeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTestEmployees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return testEmployeeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TestEmployee instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTestEmployees( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TestEmployees");
		return testEmployeeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTestEmployeeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return testEmployeeService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TestEmployeeService instance
	 */
	protected void setTestEmployeeService(TestEmployeeService service) {
		this.testEmployeeService = service;
	}

}

