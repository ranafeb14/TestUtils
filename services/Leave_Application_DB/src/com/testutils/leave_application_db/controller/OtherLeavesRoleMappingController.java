/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.OtherLeavesRoleMapping;
import com.testutils.leave_application_db.service.OtherLeavesRoleMappingService;


/**
 * Controller object for domain model class OtherLeavesRoleMapping.
 * @see OtherLeavesRoleMapping
 */
@RestController("Leave_Application_DB.OtherLeavesRoleMappingController")
@Api(value = "OtherLeavesRoleMappingController", description = "Exposes APIs to work with OtherLeavesRoleMapping resource.")
@RequestMapping("/Leave_Application_DB/OtherLeavesRoleMapping")
public class OtherLeavesRoleMappingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OtherLeavesRoleMappingController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.OtherLeavesRoleMappingService")
	private OtherLeavesRoleMappingService otherLeavesRoleMappingService;

	@ApiOperation(value = "Creates a new OtherLeavesRoleMapping instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public OtherLeavesRoleMapping createOtherLeavesRoleMapping(@RequestBody OtherLeavesRoleMapping otherLeavesRoleMapping) {
		LOGGER.debug("Create OtherLeavesRoleMapping with information: {}" , otherLeavesRoleMapping);

		otherLeavesRoleMapping = otherLeavesRoleMappingService.create(otherLeavesRoleMapping);
		LOGGER.debug("Created OtherLeavesRoleMapping with information: {}" , otherLeavesRoleMapping);

	    return otherLeavesRoleMapping;
	}


    @ApiOperation(value = "Returns the OtherLeavesRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OtherLeavesRoleMapping getOtherLeavesRoleMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting OtherLeavesRoleMapping with id: {}" , id);

        OtherLeavesRoleMapping foundOtherLeavesRoleMapping = otherLeavesRoleMappingService.getById(id);
        LOGGER.debug("OtherLeavesRoleMapping details with id: {}" , foundOtherLeavesRoleMapping);

        return foundOtherLeavesRoleMapping;
    }

    @ApiOperation(value = "Updates the OtherLeavesRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OtherLeavesRoleMapping editOtherLeavesRoleMapping(@PathVariable("id") Integer id, @RequestBody OtherLeavesRoleMapping otherLeavesRoleMapping) throws EntityNotFoundException {
        LOGGER.debug("Editing OtherLeavesRoleMapping with id: {}" , otherLeavesRoleMapping.getId());

        otherLeavesRoleMapping.setId(id);
        otherLeavesRoleMapping = otherLeavesRoleMappingService.update(otherLeavesRoleMapping);
        LOGGER.debug("OtherLeavesRoleMapping details with id: {}" , otherLeavesRoleMapping);

        return otherLeavesRoleMapping;
    }

    @ApiOperation(value = "Deletes the OtherLeavesRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOtherLeavesRoleMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OtherLeavesRoleMapping with id: {}" , id);

        OtherLeavesRoleMapping deletedOtherLeavesRoleMapping = otherLeavesRoleMappingService.delete(id);

        return deletedOtherLeavesRoleMapping != null;
    }

    /**
     * @deprecated Use {@link #findOtherLeavesRoleMappings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OtherLeavesRoleMapping instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeavesRoleMapping> searchOtherLeavesRoleMappingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OtherLeavesRoleMappings list");
        return otherLeavesRoleMappingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OtherLeavesRoleMapping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeavesRoleMapping> findOtherLeavesRoleMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OtherLeavesRoleMappings list");
        return otherLeavesRoleMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OtherLeavesRoleMapping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeavesRoleMapping> filterOtherLeavesRoleMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OtherLeavesRoleMappings list");
        return otherLeavesRoleMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOtherLeavesRoleMappings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return otherLeavesRoleMappingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of OtherLeavesRoleMapping instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOtherLeavesRoleMappings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OtherLeavesRoleMappings");
		return otherLeavesRoleMappingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOtherLeavesRoleMappingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return otherLeavesRoleMappingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OtherLeavesRoleMappingService instance
	 */
	protected void setOtherLeavesRoleMappingService(OtherLeavesRoleMappingService service) {
		this.otherLeavesRoleMappingService = service;
	}

}

