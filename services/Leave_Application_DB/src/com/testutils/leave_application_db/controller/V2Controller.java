/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.V2;
import com.testutils.leave_application_db.V2Id;
import com.testutils.leave_application_db.service.V2Service;


/**
 * Controller object for domain model class V2.
 * @see V2
 */
@RestController("Leave_Application_DB.V2Controller")
@Api(value = "V2Controller", description = "Exposes APIs to work with V2 resource.")
@RequestMapping("/Leave_Application_DB/V2")
public class V2Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(V2Controller.class);

    @Autowired
	@Qualifier("Leave_Application_DB.V2Service")
	private V2Service v2Service;

	@ApiOperation(value = "Creates a new V2 instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public V2 createV2(@RequestBody V2 v2) {
		LOGGER.debug("Create V2 with information: {}" , v2);

		v2 = v2Service.create(v2);
		LOGGER.debug("Created V2 with information: {}" , v2);

	    return v2;
	}

    @ApiOperation(value = "Returns the V2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public V2 getV2(@RequestParam("empId") Integer empId,@RequestParam("roleId") Long roleId) throws EntityNotFoundException {

        V2Id v2Id = new V2Id();
        v2Id.setEmpId(empId);
        v2Id.setRoleId(roleId);

        LOGGER.debug("Getting V2 with id: {}" , v2Id);
        V2 v2 = v2Service.getById(v2Id);
        LOGGER.debug("V2 details with id: {}" , v2);

        return v2;
    }



    @ApiOperation(value = "Updates the V2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public V2 editV2(@RequestParam("empId") Integer empId,@RequestParam("roleId") Long roleId, @RequestBody V2 v2) throws EntityNotFoundException {

        v2.setEmpId(empId);
        v2.setRoleId(roleId);

        LOGGER.debug("V2 details with id is updated with: {}" , v2);

        return v2Service.update(v2);
    }


    @ApiOperation(value = "Deletes the V2 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteV2(@RequestParam("empId") Integer empId,@RequestParam("roleId") Long roleId) throws EntityNotFoundException {

        V2Id v2Id = new V2Id();
        v2Id.setEmpId(empId);
        v2Id.setRoleId(roleId);

        LOGGER.debug("Deleting V2 with id: {}" , v2Id);
        V2 v2 = v2Service.delete(v2Id);

        return v2 != null;
    }


    /**
     * @deprecated Use {@link #findV2s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of V2 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<V2> searchV2sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering V2s list");
        return v2Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of V2 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<V2> findV2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering V2s list");
        return v2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of V2 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<V2> filterV2s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering V2s list");
        return v2Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportV2s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return v2Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of V2 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countV2s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting V2s");
		return v2Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getV2AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return v2Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service V2Service instance
	 */
	protected void setV2Service(V2Service service) {
		this.v2Service = service;
	}

}

