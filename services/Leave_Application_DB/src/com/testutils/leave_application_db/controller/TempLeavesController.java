/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.TempLeaves;
import com.testutils.leave_application_db.service.TempLeavesService;


/**
 * Controller object for domain model class TempLeaves.
 * @see TempLeaves
 */
@RestController("Leave_Application_DB.TempLeavesController")
@Api(value = "TempLeavesController", description = "Exposes APIs to work with TempLeaves resource.")
@RequestMapping("/Leave_Application_DB/TempLeaves")
public class TempLeavesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempLeavesController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.TempLeavesService")
	private TempLeavesService tempLeavesService;

	@ApiOperation(value = "Creates a new TempLeaves instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public TempLeaves createTempLeaves(@RequestBody TempLeaves tempLeaves) {
		LOGGER.debug("Create TempLeaves with information: {}" , tempLeaves);

		tempLeaves = tempLeavesService.create(tempLeaves);
		LOGGER.debug("Created TempLeaves with information: {}" , tempLeaves);

	    return tempLeaves;
	}


    @ApiOperation(value = "Returns the TempLeaves instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempLeaves getTempLeaves(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TempLeaves with id: {}" , id);

        TempLeaves foundTempLeaves = tempLeavesService.getById(id);
        LOGGER.debug("TempLeaves details with id: {}" , foundTempLeaves);

        return foundTempLeaves;
    }

    @ApiOperation(value = "Updates the TempLeaves instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempLeaves editTempLeaves(@PathVariable("id") Integer id, @RequestBody TempLeaves tempLeaves) throws EntityNotFoundException {
        LOGGER.debug("Editing TempLeaves with id: {}" , tempLeaves.getRecordId());

        tempLeaves.setRecordId(id);
        tempLeaves = tempLeavesService.update(tempLeaves);
        LOGGER.debug("TempLeaves details with id: {}" , tempLeaves);

        return tempLeaves;
    }

    @ApiOperation(value = "Deletes the TempLeaves instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTempLeaves(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TempLeaves with id: {}" , id);

        TempLeaves deletedTempLeaves = tempLeavesService.delete(id);

        return deletedTempLeaves != null;
    }

    @RequestMapping(value = "/empId-fiscalYear-month", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TempLeaves with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TempLeaves getByEmpIdAndFiscalYearAndMonth(@RequestParam("empId") int empId, @RequestParam("fiscalYear") String fiscalYear, @RequestParam("month") String month) {
        LOGGER.debug("Getting TempLeaves with uniques key EmpIdAndFiscalYearAndMonth");
        return tempLeavesService.getByEmpIdAndFiscalYearAndMonth(empId, fiscalYear, month);
    }

    /**
     * @deprecated Use {@link #findTempLeaves(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TempLeaves instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempLeaves> searchTempLeavesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TempLeaves list");
        return tempLeavesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TempLeaves instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempLeaves> findTempLeaves(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TempLeaves list");
        return tempLeavesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TempLeaves instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TempLeaves> filterTempLeaves(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TempLeaves list");
        return tempLeavesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTempLeaves(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tempLeavesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TempLeaves instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTempLeaves( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TempLeaves");
		return tempLeavesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTempLeavesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tempLeavesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TempLeavesService instance
	 */
	protected void setTempLeavesService(TempLeavesService service) {
		this.tempLeavesService = service;
	}

}

