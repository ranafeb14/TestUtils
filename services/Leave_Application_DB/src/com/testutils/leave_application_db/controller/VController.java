/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.V;
import com.testutils.leave_application_db.VId;
import com.testutils.leave_application_db.service.VService;


/**
 * Controller object for domain model class V.
 * @see V
 */
@RestController("Leave_Application_DB.VController")
@Api(value = "VController", description = "Exposes APIs to work with V resource.")
@RequestMapping("/Leave_Application_DB/V")
public class VController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.VService")
	private VService vService;

	@ApiOperation(value = "Creates a new V instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public V createV(@RequestBody V v) {
		LOGGER.debug("Create V with information: {}" , v);

		v = vService.create(v);
		LOGGER.debug("Created V with information: {}" , v);

	    return v;
	}

    @ApiOperation(value = "Returns the V instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public V getV(@RequestParam("empId") Integer empId,@RequestParam("roleId") Integer roleId) throws EntityNotFoundException {

        VId vId = new VId();
        vId.setEmpId(empId);
        vId.setRoleId(roleId);

        LOGGER.debug("Getting V with id: {}" , vId);
        V v = vService.getById(vId);
        LOGGER.debug("V details with id: {}" , v);

        return v;
    }



    @ApiOperation(value = "Updates the V instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public V editV(@RequestParam("empId") Integer empId,@RequestParam("roleId") Integer roleId, @RequestBody V v) throws EntityNotFoundException {

        v.setEmpId(empId);
        v.setRoleId(roleId);

        LOGGER.debug("V details with id is updated with: {}" , v);

        return vService.update(v);
    }


    @ApiOperation(value = "Deletes the V instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteV(@RequestParam("empId") Integer empId,@RequestParam("roleId") Integer roleId) throws EntityNotFoundException {

        VId vId = new VId();
        vId.setEmpId(empId);
        vId.setRoleId(roleId);

        LOGGER.debug("Deleting V with id: {}" , vId);
        V v = vService.delete(vId);

        return v != null;
    }


    /**
     * @deprecated Use {@link #findVs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of V instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<V> searchVsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Vs list");
        return vService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of V instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<V> findVs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vs list");
        return vService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of V instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<V> filterVs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Vs list");
        return vService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of V instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Vs");
		return vService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VService instance
	 */
	protected void setVService(VService service) {
		this.vService = service;
	}

}

