/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.EmpRoles;
import com.testutils.leave_application_db.EmpRolesId;
import com.testutils.leave_application_db.service.EmpRolesService;


/**
 * Controller object for domain model class EmpRoles.
 * @see EmpRoles
 */
@RestController("Leave_Application_DB.EmpRolesController")
@Api(value = "EmpRolesController", description = "Exposes APIs to work with EmpRoles resource.")
@RequestMapping("/Leave_Application_DB/EmpRoles")
public class EmpRolesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpRolesController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.EmpRolesService")
	private EmpRolesService empRolesService;

	@ApiOperation(value = "Creates a new EmpRoles instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EmpRoles createEmpRoles(@RequestBody EmpRoles empRoles) {
		LOGGER.debug("Create EmpRoles with information: {}" , empRoles);

		empRoles = empRolesService.create(empRoles);
		LOGGER.debug("Created EmpRoles with information: {}" , empRoles);

	    return empRoles;
	}

    @ApiOperation(value = "Returns the EmpRoles instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpRoles getEmpRoles(@RequestParam("empId") Integer empId,@RequestParam("roleId") Integer roleId) throws EntityNotFoundException {

        EmpRolesId emprolesId = new EmpRolesId();
        emprolesId.setEmpId(empId);
        emprolesId.setRoleId(roleId);

        LOGGER.debug("Getting EmpRoles with id: {}" , emprolesId);
        EmpRoles empRoles = empRolesService.getById(emprolesId);
        LOGGER.debug("EmpRoles details with id: {}" , empRoles);

        return empRoles;
    }



    @ApiOperation(value = "Updates the EmpRoles instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmpRoles editEmpRoles(@RequestParam("empId") Integer empId,@RequestParam("roleId") Integer roleId, @RequestBody EmpRoles empRoles) throws EntityNotFoundException {

        empRoles.setEmpId(empId);
        empRoles.setRoleId(roleId);

        LOGGER.debug("EmpRoles details with id is updated with: {}" , empRoles);

        return empRolesService.update(empRoles);
    }


    @ApiOperation(value = "Deletes the EmpRoles instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmpRoles(@RequestParam("empId") Integer empId,@RequestParam("roleId") Integer roleId) throws EntityNotFoundException {

        EmpRolesId emprolesId = new EmpRolesId();
        emprolesId.setEmpId(empId);
        emprolesId.setRoleId(roleId);

        LOGGER.debug("Deleting EmpRoles with id: {}" , emprolesId);
        EmpRoles empRoles = empRolesService.delete(emprolesId);

        return empRoles != null;
    }


    /**
     * @deprecated Use {@link #findEmpRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmpRoles instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpRoles> searchEmpRolesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmpRoles list");
        return empRolesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpRoles instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpRoles> findEmpRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpRoles list");
        return empRolesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmpRoles instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmpRoles> filterEmpRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmpRoles list");
        return empRolesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmpRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return empRolesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmpRoles instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmpRoles( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmpRoles");
		return empRolesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getEmpRolesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return empRolesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmpRolesService instance
	 */
	protected void setEmpRolesService(EmpRolesService service) {
		this.empRolesService = service;
	}

}

