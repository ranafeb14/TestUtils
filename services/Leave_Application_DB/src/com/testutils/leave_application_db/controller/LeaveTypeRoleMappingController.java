/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.LeaveTypeRoleMapping;
import com.testutils.leave_application_db.service.LeaveTypeRoleMappingService;


/**
 * Controller object for domain model class LeaveTypeRoleMapping.
 * @see LeaveTypeRoleMapping
 */
@RestController("Leave_Application_DB.LeaveTypeRoleMappingController")
@Api(value = "LeaveTypeRoleMappingController", description = "Exposes APIs to work with LeaveTypeRoleMapping resource.")
@RequestMapping("/Leave_Application_DB/LeaveTypeRoleMapping")
public class LeaveTypeRoleMappingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeaveTypeRoleMappingController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.LeaveTypeRoleMappingService")
	private LeaveTypeRoleMappingService leaveTypeRoleMappingService;

	@ApiOperation(value = "Creates a new LeaveTypeRoleMapping instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LeaveTypeRoleMapping createLeaveTypeRoleMapping(@RequestBody LeaveTypeRoleMapping leaveTypeRoleMapping) {
		LOGGER.debug("Create LeaveTypeRoleMapping with information: {}" , leaveTypeRoleMapping);

		leaveTypeRoleMapping = leaveTypeRoleMappingService.create(leaveTypeRoleMapping);
		LOGGER.debug("Created LeaveTypeRoleMapping with information: {}" , leaveTypeRoleMapping);

	    return leaveTypeRoleMapping;
	}


    @ApiOperation(value = "Returns the LeaveTypeRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeaveTypeRoleMapping getLeaveTypeRoleMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LeaveTypeRoleMapping with id: {}" , id);

        LeaveTypeRoleMapping foundLeaveTypeRoleMapping = leaveTypeRoleMappingService.getById(id);
        LOGGER.debug("LeaveTypeRoleMapping details with id: {}" , foundLeaveTypeRoleMapping);

        return foundLeaveTypeRoleMapping;
    }

    @ApiOperation(value = "Updates the LeaveTypeRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeaveTypeRoleMapping editLeaveTypeRoleMapping(@PathVariable("id") Integer id, @RequestBody LeaveTypeRoleMapping leaveTypeRoleMapping) throws EntityNotFoundException {
        LOGGER.debug("Editing LeaveTypeRoleMapping with id: {}" , leaveTypeRoleMapping.getId());

        leaveTypeRoleMapping.setId(id);
        leaveTypeRoleMapping = leaveTypeRoleMappingService.update(leaveTypeRoleMapping);
        LOGGER.debug("LeaveTypeRoleMapping details with id: {}" , leaveTypeRoleMapping);

        return leaveTypeRoleMapping;
    }

    @ApiOperation(value = "Deletes the LeaveTypeRoleMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLeaveTypeRoleMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LeaveTypeRoleMapping with id: {}" , id);

        LeaveTypeRoleMapping deletedLeaveTypeRoleMapping = leaveTypeRoleMappingService.delete(id);

        return deletedLeaveTypeRoleMapping != null;
    }

    /**
     * @deprecated Use {@link #findLeaveTypeRoleMappings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LeaveTypeRoleMapping instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypeRoleMapping> searchLeaveTypeRoleMappingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LeaveTypeRoleMappings list");
        return leaveTypeRoleMappingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeaveTypeRoleMapping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypeRoleMapping> findLeaveTypeRoleMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeaveTypeRoleMappings list");
        return leaveTypeRoleMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeaveTypeRoleMapping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypeRoleMapping> filterLeaveTypeRoleMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeaveTypeRoleMappings list");
        return leaveTypeRoleMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLeaveTypeRoleMappings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return leaveTypeRoleMappingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LeaveTypeRoleMapping instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLeaveTypeRoleMappings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LeaveTypeRoleMappings");
		return leaveTypeRoleMappingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLeaveTypeRoleMappingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return leaveTypeRoleMappingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LeaveTypeRoleMappingService instance
	 */
	protected void setLeaveTypeRoleMappingService(LeaveTypeRoleMappingService service) {
		this.leaveTypeRoleMappingService = service;
	}

}

