/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.AccruedElapsedLeaves;
import com.testutils.leave_application_db.service.AccruedElapsedLeavesService;


/**
 * Controller object for domain model class AccruedElapsedLeaves.
 * @see AccruedElapsedLeaves
 */
@RestController("Leave_Application_DB.AccruedElapsedLeavesController")
@Api(value = "AccruedElapsedLeavesController", description = "Exposes APIs to work with AccruedElapsedLeaves resource.")
@RequestMapping("/Leave_Application_DB/AccruedElapsedLeaves")
public class AccruedElapsedLeavesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccruedElapsedLeavesController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.AccruedElapsedLeavesService")
	private AccruedElapsedLeavesService accruedElapsedLeavesService;

	@ApiOperation(value = "Creates a new AccruedElapsedLeaves instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public AccruedElapsedLeaves createAccruedElapsedLeaves(@RequestBody AccruedElapsedLeaves accruedElapsedLeaves) {
		LOGGER.debug("Create AccruedElapsedLeaves with information: {}" , accruedElapsedLeaves);

		accruedElapsedLeaves = accruedElapsedLeavesService.create(accruedElapsedLeaves);
		LOGGER.debug("Created AccruedElapsedLeaves with information: {}" , accruedElapsedLeaves);

	    return accruedElapsedLeaves;
	}


    @ApiOperation(value = "Returns the AccruedElapsedLeaves instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccruedElapsedLeaves getAccruedElapsedLeaves(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AccruedElapsedLeaves with id: {}" , id);

        AccruedElapsedLeaves foundAccruedElapsedLeaves = accruedElapsedLeavesService.getById(id);
        LOGGER.debug("AccruedElapsedLeaves details with id: {}" , foundAccruedElapsedLeaves);

        return foundAccruedElapsedLeaves;
    }

    @ApiOperation(value = "Updates the AccruedElapsedLeaves instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AccruedElapsedLeaves editAccruedElapsedLeaves(@PathVariable("id") Integer id, @RequestBody AccruedElapsedLeaves accruedElapsedLeaves) throws EntityNotFoundException {
        LOGGER.debug("Editing AccruedElapsedLeaves with id: {}" , accruedElapsedLeaves.getRecordId());

        accruedElapsedLeaves.setRecordId(id);
        accruedElapsedLeaves = accruedElapsedLeavesService.update(accruedElapsedLeaves);
        LOGGER.debug("AccruedElapsedLeaves details with id: {}" , accruedElapsedLeaves);

        return accruedElapsedLeaves;
    }

    @ApiOperation(value = "Deletes the AccruedElapsedLeaves instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAccruedElapsedLeaves(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccruedElapsedLeaves with id: {}" , id);

        AccruedElapsedLeaves deletedAccruedElapsedLeaves = accruedElapsedLeavesService.delete(id);

        return deletedAccruedElapsedLeaves != null;
    }

    /**
     * @deprecated Use {@link #findAccruedElapsedLeaves(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AccruedElapsedLeaves instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccruedElapsedLeaves> searchAccruedElapsedLeavesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AccruedElapsedLeaves list");
        return accruedElapsedLeavesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccruedElapsedLeaves instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccruedElapsedLeaves> findAccruedElapsedLeaves(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccruedElapsedLeaves list");
        return accruedElapsedLeavesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AccruedElapsedLeaves instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AccruedElapsedLeaves> filterAccruedElapsedLeaves(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AccruedElapsedLeaves list");
        return accruedElapsedLeavesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAccruedElapsedLeaves(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return accruedElapsedLeavesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AccruedElapsedLeaves instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAccruedElapsedLeaves( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AccruedElapsedLeaves");
		return accruedElapsedLeavesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAccruedElapsedLeavesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return accruedElapsedLeavesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AccruedElapsedLeavesService instance
	 */
	protected void setAccruedElapsedLeavesService(AccruedElapsedLeavesService service) {
		this.accruedElapsedLeavesService = service;
	}

}

