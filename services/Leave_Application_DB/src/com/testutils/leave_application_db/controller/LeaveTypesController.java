/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.LeaveTypeRoleMapping;
import com.testutils.leave_application_db.LeaveTypes;
import com.testutils.leave_application_db.service.LeaveTypesService;


/**
 * Controller object for domain model class LeaveTypes.
 * @see LeaveTypes
 */
@RestController("Leave_Application_DB.LeaveTypesController")
@Api(value = "LeaveTypesController", description = "Exposes APIs to work with LeaveTypes resource.")
@RequestMapping("/Leave_Application_DB/LeaveTypes")
public class LeaveTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeaveTypesController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.LeaveTypesService")
	private LeaveTypesService leaveTypesService;

	@ApiOperation(value = "Creates a new LeaveTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LeaveTypes createLeaveTypes(@RequestBody LeaveTypes leaveTypes) {
		LOGGER.debug("Create LeaveTypes with information: {}" , leaveTypes);

		leaveTypes = leaveTypesService.create(leaveTypes);
		LOGGER.debug("Created LeaveTypes with information: {}" , leaveTypes);

	    return leaveTypes;
	}


    @ApiOperation(value = "Returns the LeaveTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeaveTypes getLeaveTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting LeaveTypes with id: {}" , id);

        LeaveTypes foundLeaveTypes = leaveTypesService.getById(id);
        LOGGER.debug("LeaveTypes details with id: {}" , foundLeaveTypes);

        return foundLeaveTypes;
    }

    @ApiOperation(value = "Updates the LeaveTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeaveTypes editLeaveTypes(@PathVariable("id") Integer id, @RequestBody LeaveTypes leaveTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing LeaveTypes with id: {}" , leaveTypes.getId());

        leaveTypes.setId(id);
        leaveTypes = leaveTypesService.update(leaveTypes);
        LOGGER.debug("LeaveTypes details with id: {}" , leaveTypes);

        return leaveTypes;
    }

    @ApiOperation(value = "Deletes the LeaveTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLeaveTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting LeaveTypes with id: {}" , id);

        LeaveTypes deletedLeaveTypes = leaveTypesService.delete(id);

        return deletedLeaveTypes != null;
    }

    @RequestMapping(value = "/name/{name}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching LeaveTypes with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeaveTypes getByName(@PathVariable("name") String name) {
        LOGGER.debug("Getting LeaveTypes with uniques key Name");
        return leaveTypesService.getByName(name);
    }

    @RequestMapping(value = "/displayName/{displayName}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching LeaveTypes with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LeaveTypes getByDisplayName(@PathVariable("displayName") String displayName) {
        LOGGER.debug("Getting LeaveTypes with uniques key DisplayName");
        return leaveTypesService.getByDisplayName(displayName);
    }

    /**
     * @deprecated Use {@link #findLeaveTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LeaveTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypes> searchLeaveTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LeaveTypes list");
        return leaveTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeaveTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypes> findLeaveTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeaveTypes list");
        return leaveTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LeaveTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypes> filterLeaveTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LeaveTypes list");
        return leaveTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLeaveTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return leaveTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LeaveTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLeaveTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LeaveTypes");
		return leaveTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLeaveTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return leaveTypesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/leaveTypeRoleMappings", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the leaveTypeRoleMappings instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LeaveTypeRoleMapping> findAssociatedLeaveTypeRoleMappings(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated leaveTypeRoleMappings");
        return leaveTypesService.findAssociatedLeaveTypeRoleMappings(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LeaveTypesService instance
	 */
	protected void setLeaveTypesService(LeaveTypesService service) {
		this.leaveTypesService = service;
	}

}

