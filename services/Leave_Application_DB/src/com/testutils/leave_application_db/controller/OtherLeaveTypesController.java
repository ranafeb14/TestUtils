/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.OtherLeaveTypes;
import com.testutils.leave_application_db.OtherLeavesRoleMapping;
import com.testutils.leave_application_db.service.OtherLeaveTypesService;


/**
 * Controller object for domain model class OtherLeaveTypes.
 * @see OtherLeaveTypes
 */
@RestController("Leave_Application_DB.OtherLeaveTypesController")
@Api(value = "OtherLeaveTypesController", description = "Exposes APIs to work with OtherLeaveTypes resource.")
@RequestMapping("/Leave_Application_DB/OtherLeaveTypes")
public class OtherLeaveTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OtherLeaveTypesController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.OtherLeaveTypesService")
	private OtherLeaveTypesService otherLeaveTypesService;

	@ApiOperation(value = "Creates a new OtherLeaveTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public OtherLeaveTypes createOtherLeaveTypes(@RequestBody OtherLeaveTypes otherLeaveTypes) {
		LOGGER.debug("Create OtherLeaveTypes with information: {}" , otherLeaveTypes);

		otherLeaveTypes = otherLeaveTypesService.create(otherLeaveTypes);
		LOGGER.debug("Created OtherLeaveTypes with information: {}" , otherLeaveTypes);

	    return otherLeaveTypes;
	}


    @ApiOperation(value = "Returns the OtherLeaveTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OtherLeaveTypes getOtherLeaveTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting OtherLeaveTypes with id: {}" , id);

        OtherLeaveTypes foundOtherLeaveTypes = otherLeaveTypesService.getById(id);
        LOGGER.debug("OtherLeaveTypes details with id: {}" , foundOtherLeaveTypes);

        return foundOtherLeaveTypes;
    }

    @ApiOperation(value = "Updates the OtherLeaveTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public OtherLeaveTypes editOtherLeaveTypes(@PathVariable("id") Integer id, @RequestBody OtherLeaveTypes otherLeaveTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing OtherLeaveTypes with id: {}" , otherLeaveTypes.getId());

        otherLeaveTypes.setId(id);
        otherLeaveTypes = otherLeaveTypesService.update(otherLeaveTypes);
        LOGGER.debug("OtherLeaveTypes details with id: {}" , otherLeaveTypes);

        return otherLeaveTypes;
    }

    @ApiOperation(value = "Deletes the OtherLeaveTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOtherLeaveTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OtherLeaveTypes with id: {}" , id);

        OtherLeaveTypes deletedOtherLeaveTypes = otherLeaveTypesService.delete(id);

        return deletedOtherLeaveTypes != null;
    }

    /**
     * @deprecated Use {@link #findOtherLeaveTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of OtherLeaveTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeaveTypes> searchOtherLeaveTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering OtherLeaveTypes list");
        return otherLeaveTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OtherLeaveTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeaveTypes> findOtherLeaveTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OtherLeaveTypes list");
        return otherLeaveTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of OtherLeaveTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeaveTypes> filterOtherLeaveTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering OtherLeaveTypes list");
        return otherLeaveTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOtherLeaveTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return otherLeaveTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of OtherLeaveTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOtherLeaveTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting OtherLeaveTypes");
		return otherLeaveTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOtherLeaveTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return otherLeaveTypesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/otherLeavesRoleMappings", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the otherLeavesRoleMappings instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<OtherLeavesRoleMapping> findAssociatedOtherLeavesRoleMappings(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated otherLeavesRoleMappings");
        return otherLeaveTypesService.findAssociatedOtherLeavesRoleMappings(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OtherLeaveTypesService instance
	 */
	protected void setOtherLeaveTypesService(OtherLeaveTypesService service) {
		this.otherLeaveTypesService = service;
	}

}

