/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.Tmp;
import com.testutils.leave_application_db.service.TmpService;


/**
 * Controller object for domain model class Tmp.
 * @see Tmp
 */
@RestController("Leave_Application_DB.TmpController")
@Api(value = "TmpController", description = "Exposes APIs to work with Tmp resource.")
@RequestMapping("/Leave_Application_DB/Tmp")
public class TmpController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TmpController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.TmpService")
	private TmpService tmpService;

	@ApiOperation(value = "Creates a new Tmp instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Tmp createTmp(@RequestBody Tmp tmp) {
		LOGGER.debug("Create Tmp with information: {}" , tmp);

		tmp = tmpService.create(tmp);
		LOGGER.debug("Created Tmp with information: {}" , tmp);

	    return tmp;
	}


    @ApiOperation(value = "Returns the Tmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tmp getTmp(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Tmp with id: {}" , id);

        Tmp foundTmp = tmpService.getById(id);
        LOGGER.debug("Tmp details with id: {}" , foundTmp);

        return foundTmp;
    }

    @ApiOperation(value = "Updates the Tmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Tmp editTmp(@PathVariable("id") Integer id, @RequestBody Tmp tmp) throws EntityNotFoundException {
        LOGGER.debug("Editing Tmp with id: {}" , tmp.getId());

        tmp.setId(id);
        tmp = tmpService.update(tmp);
        LOGGER.debug("Tmp details with id: {}" , tmp);

        return tmp;
    }

    @ApiOperation(value = "Deletes the Tmp instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTmp(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Tmp with id: {}" , id);

        Tmp deletedTmp = tmpService.delete(id);

        return deletedTmp != null;
    }

    /**
     * @deprecated Use {@link #findTmps(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Tmp instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tmp> searchTmpsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Tmps list");
        return tmpService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tmp instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tmp> findTmps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Tmps list");
        return tmpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Tmp instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Tmp> filterTmps(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Tmps list");
        return tmpService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTmps(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tmpService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Tmp instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTmps( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Tmps");
		return tmpService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTmpAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tmpService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TmpService instance
	 */
	protected void setTmpService(TmpService service) {
		this.tmpService = service;
	}

}

