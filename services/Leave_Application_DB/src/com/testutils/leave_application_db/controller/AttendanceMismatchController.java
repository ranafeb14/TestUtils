/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.AttendanceMismatch;
import com.testutils.leave_application_db.service.AttendanceMismatchService;


/**
 * Controller object for domain model class AttendanceMismatch.
 * @see AttendanceMismatch
 */
@RestController("Leave_Application_DB.AttendanceMismatchController")
@Api(value = "AttendanceMismatchController", description = "Exposes APIs to work with AttendanceMismatch resource.")
@RequestMapping("/Leave_Application_DB/AttendanceMismatch")
public class AttendanceMismatchController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AttendanceMismatchController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.AttendanceMismatchService")
	private AttendanceMismatchService attendanceMismatchService;

	@ApiOperation(value = "Creates a new AttendanceMismatch instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public AttendanceMismatch createAttendanceMismatch(@RequestBody AttendanceMismatch attendanceMismatch) {
		LOGGER.debug("Create AttendanceMismatch with information: {}" , attendanceMismatch);

		attendanceMismatch = attendanceMismatchService.create(attendanceMismatch);
		LOGGER.debug("Created AttendanceMismatch with information: {}" , attendanceMismatch);

	    return attendanceMismatch;
	}


    @ApiOperation(value = "Returns the AttendanceMismatch instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AttendanceMismatch getAttendanceMismatch(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AttendanceMismatch with id: {}" , id);

        AttendanceMismatch foundAttendanceMismatch = attendanceMismatchService.getById(id);
        LOGGER.debug("AttendanceMismatch details with id: {}" , foundAttendanceMismatch);

        return foundAttendanceMismatch;
    }

    @ApiOperation(value = "Updates the AttendanceMismatch instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AttendanceMismatch editAttendanceMismatch(@PathVariable("id") Integer id, @RequestBody AttendanceMismatch attendanceMismatch) throws EntityNotFoundException {
        LOGGER.debug("Editing AttendanceMismatch with id: {}" , attendanceMismatch.getId());

        attendanceMismatch.setId(id);
        attendanceMismatch = attendanceMismatchService.update(attendanceMismatch);
        LOGGER.debug("AttendanceMismatch details with id: {}" , attendanceMismatch);

        return attendanceMismatch;
    }

    @ApiOperation(value = "Deletes the AttendanceMismatch instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAttendanceMismatch(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AttendanceMismatch with id: {}" , id);

        AttendanceMismatch deletedAttendanceMismatch = attendanceMismatchService.delete(id);

        return deletedAttendanceMismatch != null;
    }

    @RequestMapping(value = "/employeeId-mismatchedDate", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching AttendanceMismatch with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AttendanceMismatch getByEmployeeIdAndMismatchedDate(@RequestParam("employeeId") int employeeId, @RequestParam("mismatchedDate") Date mismatchedDate) {
        LOGGER.debug("Getting AttendanceMismatch with uniques key EmployeeIdAndMismatchedDate");
        return attendanceMismatchService.getByEmployeeIdAndMismatchedDate(employeeId, mismatchedDate);
    }

    /**
     * @deprecated Use {@link #findAttendanceMismatches(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AttendanceMismatch instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AttendanceMismatch> searchAttendanceMismatchesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AttendanceMismatches list");
        return attendanceMismatchService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AttendanceMismatch instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AttendanceMismatch> findAttendanceMismatches(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AttendanceMismatches list");
        return attendanceMismatchService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AttendanceMismatch instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AttendanceMismatch> filterAttendanceMismatches(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AttendanceMismatches list");
        return attendanceMismatchService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAttendanceMismatches(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return attendanceMismatchService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AttendanceMismatch instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAttendanceMismatches( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AttendanceMismatches");
		return attendanceMismatchService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAttendanceMismatchAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return attendanceMismatchService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AttendanceMismatchService instance
	 */
	protected void setAttendanceMismatchService(AttendanceMismatchService service) {
		this.attendanceMismatchService = service;
	}

}

