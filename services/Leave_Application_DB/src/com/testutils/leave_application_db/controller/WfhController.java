/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testutils.leave_application_db.Wfh;
import com.testutils.leave_application_db.service.WfhService;


/**
 * Controller object for domain model class Wfh.
 * @see Wfh
 */
@RestController("Leave_Application_DB.WfhController")
@Api(value = "WfhController", description = "Exposes APIs to work with Wfh resource.")
@RequestMapping("/Leave_Application_DB/Wfh")
public class WfhController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WfhController.class);

    @Autowired
	@Qualifier("Leave_Application_DB.WfhService")
	private WfhService wfhService;

	@ApiOperation(value = "Creates a new Wfh instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Wfh createWfh(@RequestBody Wfh wfh) {
		LOGGER.debug("Create Wfh with information: {}" , wfh);

		wfh = wfhService.create(wfh);
		LOGGER.debug("Created Wfh with information: {}" , wfh);

	    return wfh;
	}


    @ApiOperation(value = "Returns the Wfh instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Wfh getWfh(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Wfh with id: {}" , id);

        Wfh foundWfh = wfhService.getById(id);
        LOGGER.debug("Wfh details with id: {}" , foundWfh);

        return foundWfh;
    }

    @ApiOperation(value = "Updates the Wfh instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Wfh editWfh(@PathVariable("id") Integer id, @RequestBody Wfh wfh) throws EntityNotFoundException {
        LOGGER.debug("Editing Wfh with id: {}" , wfh.getRecordId());

        wfh.setRecordId(id);
        wfh = wfhService.update(wfh);
        LOGGER.debug("Wfh details with id: {}" , wfh);

        return wfh;
    }

    @ApiOperation(value = "Deletes the Wfh instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteWfh(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Wfh with id: {}" , id);

        Wfh deletedWfh = wfhService.delete(id);

        return deletedWfh != null;
    }

    /**
     * @deprecated Use {@link #findWfhs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Wfh instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Wfh> searchWfhsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Wfhs list");
        return wfhService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Wfh instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Wfh> findWfhs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Wfhs list");
        return wfhService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Wfh instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Wfh> filterWfhs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Wfhs list");
        return wfhService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportWfhs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return wfhService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Wfh instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countWfhs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Wfhs");
		return wfhService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getWfhAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return wfhService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service WfhService instance
	 */
	protected void setWfhService(WfhService service) {
		this.wfhService = service;
	}

}

