/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.LeaveTypeRoleMapping;
import com.testutils.leave_application_db.LeaveTypes;


/**
 * ServiceImpl object for domain model class LeaveTypes.
 *
 * @see LeaveTypes
 */
@Service("Leave_Application_DB.LeaveTypesService")
public class LeaveTypesServiceImpl implements LeaveTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeaveTypesServiceImpl.class);

    @Autowired
	@Qualifier("Leave_Application_DB.LeaveTypeRoleMappingService")
	private LeaveTypeRoleMappingService leaveTypeRoleMappingService;

    @Autowired
    @Qualifier("Leave_Application_DB.LeaveTypesDao")
    private WMGenericDao<LeaveTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LeaveTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public LeaveTypes create(LeaveTypes leaveTypes) {
        LOGGER.debug("Creating a new LeaveTypes with information: {}", leaveTypes);
        LeaveTypes leaveTypesCreated = this.wmGenericDao.create(leaveTypes);
        if(leaveTypesCreated.getLeaveTypeRoleMappings() != null) {
            for(LeaveTypeRoleMapping leaveTypeRoleMapping : leaveTypesCreated.getLeaveTypeRoleMappings()) {
                leaveTypeRoleMapping.setLeaveTypes(leaveTypesCreated);
                LOGGER.debug("Creating a new child LeaveTypeRoleMapping with information: {}", leaveTypeRoleMapping);
                leaveTypeRoleMappingService.create(leaveTypeRoleMapping);
            }
        }
        return leaveTypesCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveTypes getById(Integer leavetypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding LeaveTypes by id: {}", leavetypesId);
        LeaveTypes leaveTypes = this.wmGenericDao.findById(leavetypesId);
        if (leaveTypes == null){
            LOGGER.debug("No LeaveTypes found with id: {}", leavetypesId);
            throw new EntityNotFoundException(String.valueOf(leavetypesId));
        }
        return leaveTypes;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveTypes findById(Integer leavetypesId) {
        LOGGER.debug("Finding LeaveTypes by id: {}", leavetypesId);
        return this.wmGenericDao.findById(leavetypesId);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public LeaveTypes getByName(String name) {
        Map<String, Object> nameMap = new HashMap<>();
        nameMap.put("name", name);

        LOGGER.debug("Finding LeaveTypes by unique keys: {}", nameMap);
        LeaveTypes leaveTypes = this.wmGenericDao.findByUniqueKey(nameMap);

        if (leaveTypes == null){
            LOGGER.debug("No LeaveTypes found with given unique key values: {}", nameMap);
            throw new EntityNotFoundException(String.valueOf(nameMap));
        }

        return leaveTypes;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public LeaveTypes getByDisplayName(String displayName) {
        Map<String, Object> displayNameMap = new HashMap<>();
        displayNameMap.put("displayName", displayName);

        LOGGER.debug("Finding LeaveTypes by unique keys: {}", displayNameMap);
        LeaveTypes leaveTypes = this.wmGenericDao.findByUniqueKey(displayNameMap);

        if (leaveTypes == null){
            LOGGER.debug("No LeaveTypes found with given unique key values: {}", displayNameMap);
            throw new EntityNotFoundException(String.valueOf(displayNameMap));
        }

        return leaveTypes;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveTypes update(LeaveTypes leaveTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating LeaveTypes with information: {}", leaveTypes);
        this.wmGenericDao.update(leaveTypes);

        Integer leavetypesId = leaveTypes.getId();

        return this.wmGenericDao.findById(leavetypesId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveTypes delete(Integer leavetypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LeaveTypes with id: {}", leavetypesId);
        LeaveTypes deleted = this.wmGenericDao.findById(leavetypesId);
        if (deleted == null) {
            LOGGER.debug("No LeaveTypes found with id: {}", leavetypesId);
            throw new EntityNotFoundException(String.valueOf(leavetypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<LeaveTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LeaveTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<LeaveTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LeaveTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table LeaveTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<LeaveTypeRoleMapping> findAssociatedLeaveTypeRoleMappings(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated leaveTypeRoleMappings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("leaveTypes.id = '" + id + "'");

        return leaveTypeRoleMappingService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LeaveTypeRoleMappingService instance
	 */
	protected void setLeaveTypeRoleMappingService(LeaveTypeRoleMappingService service) {
        this.leaveTypeRoleMappingService = service;
    }

}

