/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.V;
import com.testutils.leave_application_db.VId;

/**
 * Service object for domain model class {@link V}.
 */
public interface VService {

    /**
     * Creates a new V. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on V if any.
     *
     * @param v Details of the V to be created; value cannot be null.
     * @return The newly created V.
     */
	V create(V v);


	/**
	 * Returns V by given id if exists.
	 *
	 * @param vId The id of the V to get; value cannot be null.
	 * @return V associated with the given vId.
     * @throws EntityNotFoundException If no V is found.
	 */
	V getById(VId vId) throws EntityNotFoundException;

    /**
	 * Find and return the V by given id if exists, returns null otherwise.
	 *
	 * @param vId The id of the V to get; value cannot be null.
	 * @return V associated with the given vId.
	 */
	V findById(VId vId);


	/**
	 * Updates the details of an existing V. It replaces all fields of the existing V with the given v.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on V if any.
     *
	 * @param v The details of the V to be updated; value cannot be null.
	 * @return The updated V.
	 * @throws EntityNotFoundException if no V is found with given input.
	 */
	V update(V v) throws EntityNotFoundException;

    /**
	 * Deletes an existing V with the given id.
	 *
	 * @param vId The id of the V to be deleted; value cannot be null.
	 * @return The deleted V.
	 * @throws EntityNotFoundException if no V found with the given id.
	 */
	V delete(VId vId) throws EntityNotFoundException;

	/**
	 * Find all Vs matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vs.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<V> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Vs matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Vs.
     *
     * @see Pageable
     * @see Page
	 */
    Page<V> findAll(String query, Pageable pageable);

    /**
	 * Exports all Vs matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Vs in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the V.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

