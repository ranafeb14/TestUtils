/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.TempEmpLeaveData;


/**
 * ServiceImpl object for domain model class TempEmpLeaveData.
 *
 * @see TempEmpLeaveData
 */
@Service("Leave_Application_DB.TempEmpLeaveDataService")
public class TempEmpLeaveDataServiceImpl implements TempEmpLeaveDataService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TempEmpLeaveDataServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.TempEmpLeaveDataDao")
    private WMGenericDao<TempEmpLeaveData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TempEmpLeaveData, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public TempEmpLeaveData create(TempEmpLeaveData tempEmpLeaveData) {
        LOGGER.debug("Creating a new TempEmpLeaveData with information: {}", tempEmpLeaveData);
        TempEmpLeaveData tempEmpLeaveDataCreated = this.wmGenericDao.create(tempEmpLeaveData);
        return tempEmpLeaveDataCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public TempEmpLeaveData getById(Integer tempempleavedataId) throws EntityNotFoundException {
        LOGGER.debug("Finding TempEmpLeaveData by id: {}", tempempleavedataId);
        TempEmpLeaveData tempEmpLeaveData = this.wmGenericDao.findById(tempempleavedataId);
        if (tempEmpLeaveData == null){
            LOGGER.debug("No TempEmpLeaveData found with id: {}", tempempleavedataId);
            throw new EntityNotFoundException(String.valueOf(tempempleavedataId));
        }
        return tempEmpLeaveData;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public TempEmpLeaveData findById(Integer tempempleavedataId) {
        LOGGER.debug("Finding TempEmpLeaveData by id: {}", tempempleavedataId);
        return this.wmGenericDao.findById(tempempleavedataId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public TempEmpLeaveData update(TempEmpLeaveData tempEmpLeaveData) throws EntityNotFoundException {
        LOGGER.debug("Updating TempEmpLeaveData with information: {}", tempEmpLeaveData);
        this.wmGenericDao.update(tempEmpLeaveData);

        Integer tempempleavedataId = tempEmpLeaveData.getRecordId();

        return this.wmGenericDao.findById(tempempleavedataId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public TempEmpLeaveData delete(Integer tempempleavedataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TempEmpLeaveData with id: {}", tempempleavedataId);
        TempEmpLeaveData deleted = this.wmGenericDao.findById(tempempleavedataId);
        if (deleted == null) {
            LOGGER.debug("No TempEmpLeaveData found with id: {}", tempempleavedataId);
            throw new EntityNotFoundException(String.valueOf(tempempleavedataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<TempEmpLeaveData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TempEmpLeaveDatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<TempEmpLeaveData> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TempEmpLeaveDatas");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table TempEmpLeaveData to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

