/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.OtherLeaveTypes;
import com.testutils.leave_application_db.OtherLeavesRoleMapping;


/**
 * ServiceImpl object for domain model class OtherLeaveTypes.
 *
 * @see OtherLeaveTypes
 */
@Service("Leave_Application_DB.OtherLeaveTypesService")
public class OtherLeaveTypesServiceImpl implements OtherLeaveTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(OtherLeaveTypesServiceImpl.class);

    @Autowired
	@Qualifier("Leave_Application_DB.OtherLeavesRoleMappingService")
	private OtherLeavesRoleMappingService otherLeavesRoleMappingService;

    @Autowired
    @Qualifier("Leave_Application_DB.OtherLeaveTypesDao")
    private WMGenericDao<OtherLeaveTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OtherLeaveTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public OtherLeaveTypes create(OtherLeaveTypes otherLeaveTypes) {
        LOGGER.debug("Creating a new OtherLeaveTypes with information: {}", otherLeaveTypes);
        OtherLeaveTypes otherLeaveTypesCreated = this.wmGenericDao.create(otherLeaveTypes);
        if(otherLeaveTypesCreated.getOtherLeavesRoleMappings() != null) {
            for(OtherLeavesRoleMapping otherLeavesRoleMapping : otherLeaveTypesCreated.getOtherLeavesRoleMappings()) {
                otherLeavesRoleMapping.setOtherLeaveTypes(otherLeaveTypesCreated);
                LOGGER.debug("Creating a new child OtherLeavesRoleMapping with information: {}", otherLeavesRoleMapping);
                otherLeavesRoleMappingService.create(otherLeavesRoleMapping);
            }
        }
        return otherLeaveTypesCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public OtherLeaveTypes getById(Integer otherleavetypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding OtherLeaveTypes by id: {}", otherleavetypesId);
        OtherLeaveTypes otherLeaveTypes = this.wmGenericDao.findById(otherleavetypesId);
        if (otherLeaveTypes == null){
            LOGGER.debug("No OtherLeaveTypes found with id: {}", otherleavetypesId);
            throw new EntityNotFoundException(String.valueOf(otherleavetypesId));
        }
        return otherLeaveTypes;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public OtherLeaveTypes findById(Integer otherleavetypesId) {
        LOGGER.debug("Finding OtherLeaveTypes by id: {}", otherleavetypesId);
        return this.wmGenericDao.findById(otherleavetypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public OtherLeaveTypes update(OtherLeaveTypes otherLeaveTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating OtherLeaveTypes with information: {}", otherLeaveTypes);
        this.wmGenericDao.update(otherLeaveTypes);

        Integer otherleavetypesId = otherLeaveTypes.getId();

        return this.wmGenericDao.findById(otherleavetypesId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public OtherLeaveTypes delete(Integer otherleavetypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting OtherLeaveTypes with id: {}", otherleavetypesId);
        OtherLeaveTypes deleted = this.wmGenericDao.findById(otherleavetypesId);
        if (deleted == null) {
            LOGGER.debug("No OtherLeaveTypes found with id: {}", otherleavetypesId);
            throw new EntityNotFoundException(String.valueOf(otherleavetypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<OtherLeaveTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all OtherLeaveTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<OtherLeaveTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all OtherLeaveTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table OtherLeaveTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<OtherLeavesRoleMapping> findAssociatedOtherLeavesRoleMappings(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated otherLeavesRoleMappings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("otherLeaveTypes.id = '" + id + "'");

        return otherLeavesRoleMappingService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service OtherLeavesRoleMappingService instance
	 */
	protected void setOtherLeavesRoleMappingService(OtherLeavesRoleMappingService service) {
        this.otherLeavesRoleMappingService = service;
    }

}

