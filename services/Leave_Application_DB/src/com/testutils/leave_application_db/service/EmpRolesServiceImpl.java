/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.EmpRoles;
import com.testutils.leave_application_db.EmpRolesId;


/**
 * ServiceImpl object for domain model class EmpRoles.
 *
 * @see EmpRoles
 */
@Service("Leave_Application_DB.EmpRolesService")
public class EmpRolesServiceImpl implements EmpRolesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpRolesServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.EmpRolesDao")
    private WMGenericDao<EmpRoles, EmpRolesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpRoles, EmpRolesId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public EmpRoles create(EmpRoles empRoles) {
        LOGGER.debug("Creating a new EmpRoles with information: {}", empRoles);
        EmpRoles empRolesCreated = this.wmGenericDao.create(empRoles);
        return empRolesCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRoles getById(EmpRolesId emprolesId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmpRoles by id: {}", emprolesId);
        EmpRoles empRoles = this.wmGenericDao.findById(emprolesId);
        if (empRoles == null){
            LOGGER.debug("No EmpRoles found with id: {}", emprolesId);
            throw new EntityNotFoundException(String.valueOf(emprolesId));
        }
        return empRoles;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRoles findById(EmpRolesId emprolesId) {
        LOGGER.debug("Finding EmpRoles by id: {}", emprolesId);
        return this.wmGenericDao.findById(emprolesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRoles update(EmpRoles empRoles) throws EntityNotFoundException {
        LOGGER.debug("Updating EmpRoles with information: {}", empRoles);
        this.wmGenericDao.update(empRoles);

        EmpRolesId emprolesId = new EmpRolesId();
        emprolesId.setEmpId(empRoles.getEmpId());
        emprolesId.setRoleId(empRoles.getRoleId());

        return this.wmGenericDao.findById(emprolesId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRoles delete(EmpRolesId emprolesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmpRoles with id: {}", emprolesId);
        EmpRoles deleted = this.wmGenericDao.findById(emprolesId);
        if (deleted == null) {
            LOGGER.debug("No EmpRoles found with id: {}", emprolesId);
            throw new EntityNotFoundException(String.valueOf(emprolesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<EmpRoles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpRoles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<EmpRoles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpRoles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table EmpRoles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

