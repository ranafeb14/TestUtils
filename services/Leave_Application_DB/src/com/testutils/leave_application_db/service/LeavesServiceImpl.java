/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.Leaves;


/**
 * ServiceImpl object for domain model class Leaves.
 *
 * @see Leaves
 */
@Service("Leave_Application_DB.LeavesService")
public class LeavesServiceImpl implements LeavesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeavesServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.LeavesDao")
    private WMGenericDao<Leaves, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Leaves, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public Leaves create(Leaves leaves) {
        LOGGER.debug("Creating a new Leaves with information: {}", leaves);
        Leaves leavesCreated = this.wmGenericDao.create(leaves);
        return leavesCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Leaves getById(Integer leavesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Leaves by id: {}", leavesId);
        Leaves leaves = this.wmGenericDao.findById(leavesId);
        if (leaves == null){
            LOGGER.debug("No Leaves found with id: {}", leavesId);
            throw new EntityNotFoundException(String.valueOf(leavesId));
        }
        return leaves;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Leaves findById(Integer leavesId) {
        LOGGER.debug("Finding Leaves by id: {}", leavesId);
        return this.wmGenericDao.findById(leavesId);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Leaves getByEmpIdAndFiscalYearAndMonth(int empId, String fiscalYear, String month) {
        Map<String, Object> empIdAndFiscalYearAndMonthMap = new HashMap<>();
        empIdAndFiscalYearAndMonthMap.put("empId", empId);
        empIdAndFiscalYearAndMonthMap.put("fiscalYear", fiscalYear);
        empIdAndFiscalYearAndMonthMap.put("month", month);

        LOGGER.debug("Finding Leaves by unique keys: {}", empIdAndFiscalYearAndMonthMap);
        Leaves leaves = this.wmGenericDao.findByUniqueKey(empIdAndFiscalYearAndMonthMap);

        if (leaves == null){
            LOGGER.debug("No Leaves found with given unique key values: {}", empIdAndFiscalYearAndMonthMap);
            throw new EntityNotFoundException(String.valueOf(empIdAndFiscalYearAndMonthMap));
        }

        return leaves;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public Leaves update(Leaves leaves) throws EntityNotFoundException {
        LOGGER.debug("Updating Leaves with information: {}", leaves);
        this.wmGenericDao.update(leaves);

        Integer leavesId = leaves.getRecordId();

        return this.wmGenericDao.findById(leavesId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public Leaves delete(Integer leavesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Leaves with id: {}", leavesId);
        Leaves deleted = this.wmGenericDao.findById(leavesId);
        if (deleted == null) {
            LOGGER.debug("No Leaves found with id: {}", leavesId);
            throw new EntityNotFoundException(String.valueOf(leavesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<Leaves> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Leaves");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<Leaves> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Leaves");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table Leaves to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

