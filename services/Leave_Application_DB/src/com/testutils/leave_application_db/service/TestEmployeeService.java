/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.TestEmployee;

/**
 * Service object for domain model class {@link TestEmployee}.
 */
public interface TestEmployeeService {

    /**
     * Creates a new TestEmployee. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TestEmployee if any.
     *
     * @param testEmployee Details of the TestEmployee to be created; value cannot be null.
     * @return The newly created TestEmployee.
     */
	TestEmployee create(TestEmployee testEmployee);


	/**
	 * Returns TestEmployee by given id if exists.
	 *
	 * @param testemployeeId The id of the TestEmployee to get; value cannot be null.
	 * @return TestEmployee associated with the given testemployeeId.
     * @throws EntityNotFoundException If no TestEmployee is found.
	 */
	TestEmployee getById(BigInteger testemployeeId) throws EntityNotFoundException;

    /**
	 * Find and return the TestEmployee by given id if exists, returns null otherwise.
	 *
	 * @param testemployeeId The id of the TestEmployee to get; value cannot be null.
	 * @return TestEmployee associated with the given testemployeeId.
	 */
	TestEmployee findById(BigInteger testemployeeId);

    /**
	 * Find and return the TestEmployee for given ldapUid  if exists.
	 *
	 * @param ldapUid value of ldapUid; value cannot be null.
	 * @return TestEmployee associated with the given inputs.
     * @throws EntityNotFoundException if no matching TestEmployee found.
	 */
    TestEmployee getByLdapUid(String ldapUid)throws EntityNotFoundException;

    /**
	 * Find and return the TestEmployee for given email  andactive  if exists.
	 *
	 * @param email value of email; value cannot be null.
	 * @param active value of active; value cannot be null.
	 * @return TestEmployee associated with the given inputs.
     * @throws EntityNotFoundException if no matching TestEmployee found.
	 */
    TestEmployee getByEmailAndActive(String email, boolean active)throws EntityNotFoundException;

    /**
	 * Find and return the TestEmployee for given testEmployeeCode  if exists.
	 *
	 * @param testEmployeeCode value of testEmployeeCode; value cannot be null.
	 * @return TestEmployee associated with the given inputs.
     * @throws EntityNotFoundException if no matching TestEmployee found.
	 */
    TestEmployee getByTestEmployeeCode(BigInteger testEmployeeCode)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing TestEmployee. It replaces all fields of the existing TestEmployee with the given testEmployee.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TestEmployee if any.
     *
	 * @param testEmployee The details of the TestEmployee to be updated; value cannot be null.
	 * @return The updated TestEmployee.
	 * @throws EntityNotFoundException if no TestEmployee is found with given input.
	 */
	TestEmployee update(TestEmployee testEmployee) throws EntityNotFoundException;

    /**
	 * Deletes an existing TestEmployee with the given id.
	 *
	 * @param testemployeeId The id of the TestEmployee to be deleted; value cannot be null.
	 * @return The deleted TestEmployee.
	 * @throws EntityNotFoundException if no TestEmployee found with the given id.
	 */
	TestEmployee delete(BigInteger testemployeeId) throws EntityNotFoundException;

	/**
	 * Find all TestEmployees matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestEmployees.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TestEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TestEmployees matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TestEmployees.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TestEmployee> findAll(String query, Pageable pageable);

    /**
	 * Exports all TestEmployees matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TestEmployees in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TestEmployee.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

