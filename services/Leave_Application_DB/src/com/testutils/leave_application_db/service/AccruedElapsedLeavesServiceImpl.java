/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.AccruedElapsedLeaves;


/**
 * ServiceImpl object for domain model class AccruedElapsedLeaves.
 *
 * @see AccruedElapsedLeaves
 */
@Service("Leave_Application_DB.AccruedElapsedLeavesService")
public class AccruedElapsedLeavesServiceImpl implements AccruedElapsedLeavesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccruedElapsedLeavesServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.AccruedElapsedLeavesDao")
    private WMGenericDao<AccruedElapsedLeaves, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AccruedElapsedLeaves, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public AccruedElapsedLeaves create(AccruedElapsedLeaves accruedElapsedLeaves) {
        LOGGER.debug("Creating a new AccruedElapsedLeaves with information: {}", accruedElapsedLeaves);
        AccruedElapsedLeaves accruedElapsedLeavesCreated = this.wmGenericDao.create(accruedElapsedLeaves);
        return accruedElapsedLeavesCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public AccruedElapsedLeaves getById(Integer accruedelapsedleavesId) throws EntityNotFoundException {
        LOGGER.debug("Finding AccruedElapsedLeaves by id: {}", accruedelapsedleavesId);
        AccruedElapsedLeaves accruedElapsedLeaves = this.wmGenericDao.findById(accruedelapsedleavesId);
        if (accruedElapsedLeaves == null){
            LOGGER.debug("No AccruedElapsedLeaves found with id: {}", accruedelapsedleavesId);
            throw new EntityNotFoundException(String.valueOf(accruedelapsedleavesId));
        }
        return accruedElapsedLeaves;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public AccruedElapsedLeaves findById(Integer accruedelapsedleavesId) {
        LOGGER.debug("Finding AccruedElapsedLeaves by id: {}", accruedelapsedleavesId);
        return this.wmGenericDao.findById(accruedelapsedleavesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public AccruedElapsedLeaves update(AccruedElapsedLeaves accruedElapsedLeaves) throws EntityNotFoundException {
        LOGGER.debug("Updating AccruedElapsedLeaves with information: {}", accruedElapsedLeaves);
        this.wmGenericDao.update(accruedElapsedLeaves);

        Integer accruedelapsedleavesId = accruedElapsedLeaves.getRecordId();

        return this.wmGenericDao.findById(accruedelapsedleavesId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public AccruedElapsedLeaves delete(Integer accruedelapsedleavesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AccruedElapsedLeaves with id: {}", accruedelapsedleavesId);
        AccruedElapsedLeaves deleted = this.wmGenericDao.findById(accruedelapsedleavesId);
        if (deleted == null) {
            LOGGER.debug("No AccruedElapsedLeaves found with id: {}", accruedelapsedleavesId);
            throw new EntityNotFoundException(String.valueOf(accruedelapsedleavesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<AccruedElapsedLeaves> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AccruedElapsedLeaves");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<AccruedElapsedLeaves> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AccruedElapsedLeaves");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table AccruedElapsedLeaves to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

