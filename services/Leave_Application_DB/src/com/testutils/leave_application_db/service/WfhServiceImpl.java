/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.Wfh;


/**
 * ServiceImpl object for domain model class Wfh.
 *
 * @see Wfh
 */
@Service("Leave_Application_DB.WfhService")
public class WfhServiceImpl implements WfhService {

    private static final Logger LOGGER = LoggerFactory.getLogger(WfhServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.WfhDao")
    private WMGenericDao<Wfh, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Wfh, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public Wfh create(Wfh wfh) {
        LOGGER.debug("Creating a new Wfh with information: {}", wfh);
        Wfh wfhCreated = this.wmGenericDao.create(wfh);
        return wfhCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Wfh getById(Integer wfhId) throws EntityNotFoundException {
        LOGGER.debug("Finding Wfh by id: {}", wfhId);
        Wfh wfh = this.wmGenericDao.findById(wfhId);
        if (wfh == null){
            LOGGER.debug("No Wfh found with id: {}", wfhId);
            throw new EntityNotFoundException(String.valueOf(wfhId));
        }
        return wfh;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Wfh findById(Integer wfhId) {
        LOGGER.debug("Finding Wfh by id: {}", wfhId);
        return this.wmGenericDao.findById(wfhId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public Wfh update(Wfh wfh) throws EntityNotFoundException {
        LOGGER.debug("Updating Wfh with information: {}", wfh);
        this.wmGenericDao.update(wfh);

        Integer wfhId = wfh.getRecordId();

        return this.wmGenericDao.findById(wfhId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public Wfh delete(Integer wfhId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Wfh with id: {}", wfhId);
        Wfh deleted = this.wmGenericDao.findById(wfhId);
        if (deleted == null) {
            LOGGER.debug("No Wfh found with id: {}", wfhId);
            throw new EntityNotFoundException(String.valueOf(wfhId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<Wfh> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Wfhs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<Wfh> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Wfhs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table Wfh to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

