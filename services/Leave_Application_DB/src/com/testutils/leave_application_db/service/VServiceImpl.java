/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.V;
import com.testutils.leave_application_db.VId;


/**
 * ServiceImpl object for domain model class V.
 *
 * @see V
 */
@Service("Leave_Application_DB.VService")
public class VServiceImpl implements VService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.VDao")
    private WMGenericDao<V, VId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<V, VId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public V create(V v) {
        LOGGER.debug("Creating a new V with information: {}", v);
        V vCreated = this.wmGenericDao.create(v);
        return vCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public V getById(VId vId) throws EntityNotFoundException {
        LOGGER.debug("Finding V by id: {}", vId);
        V v = this.wmGenericDao.findById(vId);
        if (v == null){
            LOGGER.debug("No V found with id: {}", vId);
            throw new EntityNotFoundException(String.valueOf(vId));
        }
        return v;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public V findById(VId vId) {
        LOGGER.debug("Finding V by id: {}", vId);
        return this.wmGenericDao.findById(vId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public V update(V v) throws EntityNotFoundException {
        LOGGER.debug("Updating V with information: {}", v);
        this.wmGenericDao.update(v);

        VId vId = new VId();
        vId.setEmpId(v.getEmpId());
        vId.setRoleId(v.getRoleId());

        return this.wmGenericDao.findById(vId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public V delete(VId vId) throws EntityNotFoundException {
        LOGGER.debug("Deleting V with id: {}", vId);
        V deleted = this.wmGenericDao.findById(vId);
        if (deleted == null) {
            LOGGER.debug("No V found with id: {}", vId);
            throw new EntityNotFoundException(String.valueOf(vId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<V> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<V> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table V to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

