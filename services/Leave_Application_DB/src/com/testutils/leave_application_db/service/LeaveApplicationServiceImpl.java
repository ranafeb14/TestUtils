/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.LeaveApplication;


/**
 * ServiceImpl object for domain model class LeaveApplication.
 *
 * @see LeaveApplication
 */
@Service("Leave_Application_DB.LeaveApplicationService")
public class LeaveApplicationServiceImpl implements LeaveApplicationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LeaveApplicationServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.LeaveApplicationDao")
    private WMGenericDao<LeaveApplication, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LeaveApplication, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public LeaveApplication create(LeaveApplication leaveApplication) {
        LOGGER.debug("Creating a new LeaveApplication with information: {}", leaveApplication);
        LeaveApplication leaveApplicationCreated = this.wmGenericDao.create(leaveApplication);
        return leaveApplicationCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveApplication getById(Integer leaveapplicationId) throws EntityNotFoundException {
        LOGGER.debug("Finding LeaveApplication by id: {}", leaveapplicationId);
        LeaveApplication leaveApplication = this.wmGenericDao.findById(leaveapplicationId);
        if (leaveApplication == null){
            LOGGER.debug("No LeaveApplication found with id: {}", leaveapplicationId);
            throw new EntityNotFoundException(String.valueOf(leaveapplicationId));
        }
        return leaveApplication;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveApplication findById(Integer leaveapplicationId) {
        LOGGER.debug("Finding LeaveApplication by id: {}", leaveapplicationId);
        return this.wmGenericDao.findById(leaveapplicationId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveApplication update(LeaveApplication leaveApplication) throws EntityNotFoundException {
        LOGGER.debug("Updating LeaveApplication with information: {}", leaveApplication);
        this.wmGenericDao.update(leaveApplication);

        Integer leaveapplicationId = leaveApplication.getRecordId();

        return this.wmGenericDao.findById(leaveapplicationId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public LeaveApplication delete(Integer leaveapplicationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LeaveApplication with id: {}", leaveapplicationId);
        LeaveApplication deleted = this.wmGenericDao.findById(leaveapplicationId);
        if (deleted == null) {
            LOGGER.debug("No LeaveApplication found with id: {}", leaveapplicationId);
            throw new EntityNotFoundException(String.valueOf(leaveapplicationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<LeaveApplication> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LeaveApplications");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<LeaveApplication> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LeaveApplications");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table LeaveApplication to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

