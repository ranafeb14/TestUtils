/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.EmpRolesView;
import com.testutils.leave_application_db.EmpRolesViewId;


/**
 * ServiceImpl object for domain model class EmpRolesView.
 *
 * @see EmpRolesView
 */
@Service("Leave_Application_DB.EmpRolesViewService")
public class EmpRolesViewServiceImpl implements EmpRolesViewService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpRolesViewServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.EmpRolesViewDao")
    private WMGenericDao<EmpRolesView, EmpRolesViewId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmpRolesView, EmpRolesViewId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public EmpRolesView create(EmpRolesView empRolesView) {
        LOGGER.debug("Creating a new EmpRolesView with information: {}", empRolesView);
        EmpRolesView empRolesViewCreated = this.wmGenericDao.create(empRolesView);
        return empRolesViewCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRolesView getById(EmpRolesViewId emprolesviewId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmpRolesView by id: {}", emprolesviewId);
        EmpRolesView empRolesView = this.wmGenericDao.findById(emprolesviewId);
        if (empRolesView == null){
            LOGGER.debug("No EmpRolesView found with id: {}", emprolesviewId);
            throw new EntityNotFoundException(String.valueOf(emprolesviewId));
        }
        return empRolesView;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRolesView findById(EmpRolesViewId emprolesviewId) {
        LOGGER.debug("Finding EmpRolesView by id: {}", emprolesviewId);
        return this.wmGenericDao.findById(emprolesviewId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRolesView update(EmpRolesView empRolesView) throws EntityNotFoundException {
        LOGGER.debug("Updating EmpRolesView with information: {}", empRolesView);
        this.wmGenericDao.update(empRolesView);

        EmpRolesViewId emprolesviewId = new EmpRolesViewId();
        emprolesviewId.setEmpId(empRolesView.getEmpId());
        emprolesviewId.setRoleId(empRolesView.getRoleId());

        return this.wmGenericDao.findById(emprolesviewId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public EmpRolesView delete(EmpRolesViewId emprolesviewId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmpRolesView with id: {}", emprolesviewId);
        EmpRolesView deleted = this.wmGenericDao.findById(emprolesviewId);
        if (deleted == null) {
            LOGGER.debug("No EmpRolesView found with id: {}", emprolesviewId);
            throw new EntityNotFoundException(String.valueOf(emprolesviewId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<EmpRolesView> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmpRolesViews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<EmpRolesView> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmpRolesViews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table EmpRolesView to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

