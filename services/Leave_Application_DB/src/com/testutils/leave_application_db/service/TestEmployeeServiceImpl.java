/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.TestEmployee;


/**
 * ServiceImpl object for domain model class TestEmployee.
 *
 * @see TestEmployee
 */
@Service("Leave_Application_DB.TestEmployeeService")
public class TestEmployeeServiceImpl implements TestEmployeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestEmployeeServiceImpl.class);


    @Autowired
    @Qualifier("Leave_Application_DB.TestEmployeeDao")
    private WMGenericDao<TestEmployee, BigInteger> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestEmployee, BigInteger> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
    @Override
	public TestEmployee create(TestEmployee testEmployee) {
        LOGGER.debug("Creating a new TestEmployee with information: {}", testEmployee);
        TestEmployee testEmployeeCreated = this.wmGenericDao.create(testEmployee);
        return testEmployeeCreated;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public TestEmployee getById(BigInteger testemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding TestEmployee by id: {}", testemployeeId);
        TestEmployee testEmployee = this.wmGenericDao.findById(testemployeeId);
        if (testEmployee == null){
            LOGGER.debug("No TestEmployee found with id: {}", testemployeeId);
            throw new EntityNotFoundException(String.valueOf(testemployeeId));
        }
        return testEmployee;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public TestEmployee findById(BigInteger testemployeeId) {
        LOGGER.debug("Finding TestEmployee by id: {}", testemployeeId);
        return this.wmGenericDao.findById(testemployeeId);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public TestEmployee getByLdapUid(String ldapUid) {
        Map<String, Object> ldapUidMap = new HashMap<>();
        ldapUidMap.put("ldapUid", ldapUid);

        LOGGER.debug("Finding TestEmployee by unique keys: {}", ldapUidMap);
        TestEmployee testEmployee = this.wmGenericDao.findByUniqueKey(ldapUidMap);

        if (testEmployee == null){
            LOGGER.debug("No TestEmployee found with given unique key values: {}", ldapUidMap);
            throw new EntityNotFoundException(String.valueOf(ldapUidMap));
        }

        return testEmployee;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public TestEmployee getByEmailAndActive(String email, boolean active) {
        Map<String, Object> emailAndActiveMap = new HashMap<>();
        emailAndActiveMap.put("email", email);
        emailAndActiveMap.put("active", active);

        LOGGER.debug("Finding TestEmployee by unique keys: {}", emailAndActiveMap);
        TestEmployee testEmployee = this.wmGenericDao.findByUniqueKey(emailAndActiveMap);

        if (testEmployee == null){
            LOGGER.debug("No TestEmployee found with given unique key values: {}", emailAndActiveMap);
            throw new EntityNotFoundException(String.valueOf(emailAndActiveMap));
        }

        return testEmployee;
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public TestEmployee getByTestEmployeeCode(BigInteger testEmployeeCode) {
        Map<String, Object> testEmployeeCodeMap = new HashMap<>();
        testEmployeeCodeMap.put("testEmployeeCode", testEmployeeCode);

        LOGGER.debug("Finding TestEmployee by unique keys: {}", testEmployeeCodeMap);
        TestEmployee testEmployee = this.wmGenericDao.findByUniqueKey(testEmployeeCodeMap);

        if (testEmployee == null){
            LOGGER.debug("No TestEmployee found with given unique key values: {}", testEmployeeCodeMap);
            throw new EntityNotFoundException(String.valueOf(testEmployeeCodeMap));
        }

        return testEmployee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "Leave_Application_DBTransactionManager")
	@Override
	public TestEmployee update(TestEmployee testEmployee) throws EntityNotFoundException {
        LOGGER.debug("Updating TestEmployee with information: {}", testEmployee);
        this.wmGenericDao.update(testEmployee);

        BigInteger testemployeeId = testEmployee.getId();

        return this.wmGenericDao.findById(testemployeeId);
    }

    @Transactional(value = "Leave_Application_DBTransactionManager")
	@Override
	public TestEmployee delete(BigInteger testemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestEmployee with id: {}", testemployeeId);
        TestEmployee deleted = this.wmGenericDao.findById(testemployeeId);
        if (deleted == null) {
            LOGGER.debug("No TestEmployee found with id: {}", testemployeeId);
            throw new EntityNotFoundException(String.valueOf(testemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public Page<TestEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TestEmployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Page<TestEmployee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TestEmployees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service Leave_Application_DB for table TestEmployee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "Leave_Application_DBTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

