/*Generated by WaveMaker Studio*/
package com.testutils.leave_application_db.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testutils.leave_application_db.AttendanceMismatch;

/**
 * Service object for domain model class {@link AttendanceMismatch}.
 */
public interface AttendanceMismatchService {

    /**
     * Creates a new AttendanceMismatch. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AttendanceMismatch if any.
     *
     * @param attendanceMismatch Details of the AttendanceMismatch to be created; value cannot be null.
     * @return The newly created AttendanceMismatch.
     */
	AttendanceMismatch create(AttendanceMismatch attendanceMismatch);


	/**
	 * Returns AttendanceMismatch by given id if exists.
	 *
	 * @param attendancemismatchId The id of the AttendanceMismatch to get; value cannot be null.
	 * @return AttendanceMismatch associated with the given attendancemismatchId.
     * @throws EntityNotFoundException If no AttendanceMismatch is found.
	 */
	AttendanceMismatch getById(Integer attendancemismatchId) throws EntityNotFoundException;

    /**
	 * Find and return the AttendanceMismatch by given id if exists, returns null otherwise.
	 *
	 * @param attendancemismatchId The id of the AttendanceMismatch to get; value cannot be null.
	 * @return AttendanceMismatch associated with the given attendancemismatchId.
	 */
	AttendanceMismatch findById(Integer attendancemismatchId);

    /**
	 * Find and return the AttendanceMismatch for given employeeId  andmismatchedDate  if exists.
	 *
	 * @param employeeId value of employeeId; value cannot be null.
	 * @param mismatchedDate value of mismatchedDate; value cannot be null.
	 * @return AttendanceMismatch associated with the given inputs.
     * @throws EntityNotFoundException if no matching AttendanceMismatch found.
	 */
    AttendanceMismatch getByEmployeeIdAndMismatchedDate(int employeeId, Date mismatchedDate)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing AttendanceMismatch. It replaces all fields of the existing AttendanceMismatch with the given attendanceMismatch.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on AttendanceMismatch if any.
     *
	 * @param attendanceMismatch The details of the AttendanceMismatch to be updated; value cannot be null.
	 * @return The updated AttendanceMismatch.
	 * @throws EntityNotFoundException if no AttendanceMismatch is found with given input.
	 */
	AttendanceMismatch update(AttendanceMismatch attendanceMismatch) throws EntityNotFoundException;

    /**
	 * Deletes an existing AttendanceMismatch with the given id.
	 *
	 * @param attendancemismatchId The id of the AttendanceMismatch to be deleted; value cannot be null.
	 * @return The deleted AttendanceMismatch.
	 * @throws EntityNotFoundException if no AttendanceMismatch found with the given id.
	 */
	AttendanceMismatch delete(Integer attendancemismatchId) throws EntityNotFoundException;

	/**
	 * Find all AttendanceMismatches matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AttendanceMismatches.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<AttendanceMismatch> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all AttendanceMismatches matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AttendanceMismatches.
     *
     * @see Pageable
     * @see Page
	 */
    Page<AttendanceMismatch> findAll(String query, Pageable pageable);

    /**
	 * Exports all AttendanceMismatches matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the AttendanceMismatches in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the AttendanceMismatch.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

